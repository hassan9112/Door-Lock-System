
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00003298  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800138  00800138  00003404  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e3  00000000  00000000  0000653c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b99d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c16b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__vector_4>
      14:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__vector_9>
      28:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__vector_10>
      2c:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 08 	call	0x11cc	; 0x11cc <main>
      8a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e2       	ldi	r26, 0x22	; 34
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e2       	ldi	r24, 0x22	; 34
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_CallBack>:

/*
 * Description:
 * Timer callback function increments g_count to track elapsed time.
 */
void timer_CallBack() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_count++;
     b4e:	80 91 3b 01 	lds	r24, 0x013B
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 3b 01 	sts	0x013B, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <UART_flushBuffer>:
/*
 * Description:
 * Flushes the UART receive buffer to prevent any leftover bytes from interfering with operations.
 */
void UART_flushBuffer(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <UART_flushBuffer+0x12>
	while (UCSRA & (1 << RXC)) {
		(void)UDR;  // Read and discard the byte in the receive buffer
     b6a:	ec e2       	ldi	r30, 0x2C	; 44
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
 * Description:
 * Flushes the UART receive buffer to prevent any leftover bytes from interfering with operations.
 */
void UART_flushBuffer(void)
{
	while (UCSRA & (1 << RXC)) {
     b70:	eb e2       	ldi	r30, 0x2B	; 43
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	88 23       	and	r24, r24
     b78:	c4 f3       	brlt	.-16     	; 0xb6a <UART_flushBuffer+0xc>
		(void)UDR;  // Read and discard the byte in the receive buffer
	}
}
     b7a:	0f 90       	pop	r0
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <send_password_to_control_ECU>:

/*
 * Description:
 * Sends a 5-digit password over UART to the control ECU.
 */
void send_password_to_control_ECU(uint8* password) {
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	61 97       	sbiw	r28, 0x11	; 17
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	99 8b       	std	Y+17, r25	; 0x11
     b98:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 5; i++) {
     b9a:	1f 86       	std	Y+15, r1	; 0x0f
     b9c:	80 c0       	rjmp	.+256    	; 0xc9e <send_password_to_control_ECU+0x11c>
		UART_sendByte(password[i]);
     b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	88 89       	ldd	r24, Y+16	; 0x10
     ba6:	99 89       	ldd	r25, Y+17	; 0x11
     ba8:	fc 01       	movw	r30, r24
     baa:	e2 0f       	add	r30, r18
     bac:	f3 1f       	adc	r31, r19
     bae:	80 81       	ld	r24, Z
     bb0:	0e 94 07 18 	call	0x300e	; 0x300e <UART_sendByte>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e2       	ldi	r26, 0x20	; 32
     bba:	b1 e4       	ldi	r27, 0x41	; 65
     bbc:	8b 87       	std	Y+11, r24	; 0x0b
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	ad 87       	std	Y+13, r26	; 0x0d
     bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a ef       	ldi	r20, 0xFA	; 250
     bd2:	54 e4       	ldi	r21, 0x44	; 68
     bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8f 83       	std	Y+7, r24	; 0x07
     bde:	98 87       	std	Y+8, r25	; 0x08
     be0:	a9 87       	std	Y+9, r26	; 0x09
     be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <send_password_to_control_ECU+0x84>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <send_password_to_control_ECU+0x102>
	else if (__tmp > 65535)
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <send_password_to_control_ECU+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c20:	7c 85       	ldd	r23, Y+12	; 0x0c
     c22:	8d 85       	ldd	r24, Y+13	; 0x0d
     c24:	9e 85       	ldd	r25, Y+14	; 0x0e
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <send_password_to_control_ECU+0xe4>
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <send_password_to_control_ECU+0xd2>
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <send_password_to_control_ECU+0xc6>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <send_password_to_control_ECU+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6f 81       	ldd	r22, Y+7	; 0x07
     c72:	78 85       	ldd	r23, Y+8	; 0x08
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <send_password_to_control_ECU+0x10e>
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description:
 * Sends a 5-digit password over UART to the control ECU.
 */
void send_password_to_control_ECU(uint8* password) {
	for (uint8 i = 0; i < 5; i++) {
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	8f 87       	std	Y+15, r24	; 0x0f
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <send_password_to_control_ECU+0x124>
     ca4:	7c cf       	rjmp	.-264    	; 0xb9e <send_password_to_control_ECU+0x1c>
		UART_sendByte(password[i]);
		_delay_ms(10);
	}
}
     ca6:	61 96       	adiw	r28, 0x11	; 17
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <clear_password_input>:

/*
 * Description:
 * Clears the provided password array by setting each element to 0.
 */
void clear_password_input(uint8* password) {
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <clear_password_input+0x6>
     cbe:	0f 92       	push	r0
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	9b 83       	std	Y+3, r25	; 0x03
     cc6:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < 5; i++) {
     cc8:	19 82       	std	Y+1, r1	; 0x01
     cca:	0c c0       	rjmp	.+24     	; 0xce4 <clear_password_input+0x2c>
		password[i] = 0;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	10 82       	st	Z, r1
/*
 * Description:
 * Clears the provided password array by setting each element to 0.
 */
void clear_password_input(uint8* password) {
	for (uint8 i = 0; i < 5; i++) {
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	85 30       	cpi	r24, 0x05	; 5
     ce8:	88 f3       	brcs	.-30     	; 0xccc <clear_password_input+0x14>
		password[i] = 0;
	}
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <handle_password_input>:
/*
 * Description:
 * Handles user input from the keypad, storing a 5-digit password
 * and displaying '*' for each digit entered on the LCD.
 */
void handle_password_input(uint8* password) {
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	ae 97       	sbiw	r28, 0x2e	; 46
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	9e a7       	std	Y+46, r25	; 0x2e
     d0c:	8d a7       	std	Y+45, r24	; 0x2d
	uint8 key = 0;
     d0e:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 pass_counter = 0;
     d10:	1b a6       	std	Y+43, r1	; 0x2b
     d12:	71 c1       	rjmp	.+738    	; 0xff6 <handle_password_input+0x300>

	// Loop until a 5-digit password is entered
	while (pass_counter < 5) {
		key = KEYPAD_getPressedKey();
     d14:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_getPressedKey>
     d18:	8c a7       	std	Y+44, r24	; 0x2c
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e2       	ldi	r26, 0x20	; 32
     d20:	b1 e4       	ldi	r27, 0x41	; 65
     d22:	8f a3       	std	Y+39, r24	; 0x27
     d24:	98 a7       	std	Y+40, r25	; 0x28
     d26:	a9 a7       	std	Y+41, r26	; 0x29
     d28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	6f a1       	ldd	r22, Y+39	; 0x27
     d2c:	78 a5       	ldd	r23, Y+40	; 0x28
     d2e:	89 a5       	ldd	r24, Y+41	; 0x29
     d30:	9a a5       	ldd	r25, Y+42	; 0x2a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a ef       	ldi	r20, 0xFA	; 250
     d38:	54 e4       	ldi	r21, 0x44	; 68
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8b a3       	std	Y+35, r24	; 0x23
     d44:	9c a3       	std	Y+36, r25	; 0x24
     d46:	ad a3       	std	Y+37, r26	; 0x25
     d48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d4a:	6b a1       	ldd	r22, Y+35	; 0x23
     d4c:	7c a1       	ldd	r23, Y+36	; 0x24
     d4e:	8d a1       	ldd	r24, Y+37	; 0x25
     d50:	9e a1       	ldd	r25, Y+38	; 0x26
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <handle_password_input+0x76>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9a a3       	std	Y+34, r25	; 0x22
     d68:	89 a3       	std	Y+33, r24	; 0x21
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <handle_password_input+0xf4>
	else if (__tmp > 65535)
     d6c:	6b a1       	ldd	r22, Y+35	; 0x23
     d6e:	7c a1       	ldd	r23, Y+36	; 0x24
     d70:	8d a1       	ldd	r24, Y+37	; 0x25
     d72:	9e a1       	ldd	r25, Y+38	; 0x26
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <handle_password_input+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	6f a1       	ldd	r22, Y+39	; 0x27
     d86:	78 a5       	ldd	r23, Y+40	; 0x28
     d88:	89 a5       	ldd	r24, Y+41	; 0x29
     d8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9a a3       	std	Y+34, r25	; 0x22
     daa:	89 a3       	std	Y+33, r24	; 0x21
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <handle_password_input+0xd6>
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	98 a3       	std	Y+32, r25	; 0x20
     db4:	8f 8f       	std	Y+31, r24	; 0x1f
     db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db8:	98 a1       	ldd	r25, Y+32	; 0x20
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <handle_password_input+0xc4>
     dbe:	98 a3       	std	Y+32, r25	; 0x20
     dc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	89 a1       	ldd	r24, Y+33	; 0x21
     dc4:	9a a1       	ldd	r25, Y+34	; 0x22
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a a3       	std	Y+34, r25	; 0x22
     dca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	89 a1       	ldd	r24, Y+33	; 0x21
     dce:	9a a1       	ldd	r25, Y+34	; 0x22
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <handle_password_input+0xb8>
     dd4:	8a c0       	rjmp	.+276    	; 0xeea <handle_password_input+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6b a1       	ldd	r22, Y+35	; 0x23
     dd8:	7c a1       	ldd	r23, Y+36	; 0x24
     dda:	8d a1       	ldd	r24, Y+37	; 0x25
     ddc:	9e a1       	ldd	r25, Y+38	; 0x26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9a a3       	std	Y+34, r25	; 0x22
     de8:	89 a3       	std	Y+33, r24	; 0x21
     dea:	89 a1       	ldd	r24, Y+33	; 0x21
     dec:	9a a1       	ldd	r25, Y+34	; 0x22
     dee:	9e 8f       	std	Y+30, r25	; 0x1e
     df0:	8d 8f       	std	Y+29, r24	; 0x1d
     df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <handle_password_input+0x100>
     dfa:	9e 8f       	std	Y+30, r25	; 0x1e
     dfc:	8d 8f       	std	Y+29, r24	; 0x1d
     dfe:	75 c0       	rjmp	.+234    	; 0xeea <handle_password_input+0x1f4>
		_delay_ms(10);
		while (!(key >= 0 && key <= 16)) {
			key = KEYPAD_getPressedKey();
     e00:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_getPressedKey>
     e04:	8c a7       	std	Y+44, r24	; 0x2c
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e2       	ldi	r26, 0x20	; 32
     e0c:	b1 e4       	ldi	r27, 0x41	; 65
     e0e:	89 8f       	std	Y+25, r24	; 0x19
     e10:	9a 8f       	std	Y+26, r25	; 0x1a
     e12:	ab 8f       	std	Y+27, r26	; 0x1b
     e14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	69 8d       	ldd	r22, Y+25	; 0x19
     e18:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a ef       	ldi	r20, 0xFA	; 250
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8d 8b       	std	Y+21, r24	; 0x15
     e30:	9e 8b       	std	Y+22, r25	; 0x16
     e32:	af 8b       	std	Y+23, r26	; 0x17
     e34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e36:	6d 89       	ldd	r22, Y+21	; 0x15
     e38:	7e 89       	ldd	r23, Y+22	; 0x16
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	98 8d       	ldd	r25, Y+24	; 0x18
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <handle_password_input+0x162>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 8b       	std	Y+20, r25	; 0x14
     e54:	8b 8b       	std	Y+19, r24	; 0x13
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <handle_password_input+0x1e0>
	else if (__tmp > 65535)
     e58:	6d 89       	ldd	r22, Y+21	; 0x15
     e5a:	7e 89       	ldd	r23, Y+22	; 0x16
     e5c:	8f 89       	ldd	r24, Y+23	; 0x17
     e5e:	98 8d       	ldd	r25, Y+24	; 0x18
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <handle_password_input+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	69 8d       	ldd	r22, Y+25	; 0x19
     e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <handle_password_input+0x1c2>
     e9a:	88 ec       	ldi	r24, 0xC8	; 200
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9a 8b       	std	Y+18, r25	; 0x12
     ea0:	89 8b       	std	Y+17, r24	; 0x11
     ea2:	89 89       	ldd	r24, Y+17	; 0x11
     ea4:	9a 89       	ldd	r25, Y+18	; 0x12
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <handle_password_input+0x1b0>
     eaa:	9a 8b       	std	Y+18, r25	; 0x12
     eac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9c 8b       	std	Y+20, r25	; 0x14
     eb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	8b 89       	ldd	r24, Y+19	; 0x13
     eba:	9c 89       	ldd	r25, Y+20	; 0x14
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <handle_password_input+0x1a4>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <handle_password_input+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6d 89       	ldd	r22, Y+21	; 0x15
     ec4:	7e 89       	ldd	r23, Y+22	; 0x16
     ec6:	8f 89       	ldd	r24, Y+23	; 0x17
     ec8:	98 8d       	ldd	r25, Y+24	; 0x18
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9c 8b       	std	Y+20, r25	; 0x14
     ed4:	8b 8b       	std	Y+19, r24	; 0x13
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	98 8b       	std	Y+16, r25	; 0x10
     edc:	8f 87       	std	Y+15, r24	; 0x0f
     ede:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee0:	98 89       	ldd	r25, Y+16	; 0x10
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <handle_password_input+0x1ec>
     ee6:	98 8b       	std	Y+16, r25	; 0x10
     ee8:	8f 87       	std	Y+15, r24	; 0x0f

	// Loop until a 5-digit password is entered
	while (pass_counter < 5) {
		key = KEYPAD_getPressedKey();
		_delay_ms(10);
		while (!(key >= 0 && key <= 16)) {
     eea:	8c a5       	ldd	r24, Y+44	; 0x2c
     eec:	81 31       	cpi	r24, 0x11	; 17
     eee:	08 f0       	brcs	.+2      	; 0xef2 <handle_password_input+0x1fc>
     ef0:	87 cf       	rjmp	.-242    	; 0xe00 <handle_password_input+0x10a>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a6 e9       	ldi	r26, 0x96	; 150
     ef8:	b3 e4       	ldi	r27, 0x43	; 67
     efa:	8b 87       	std	Y+11, r24	; 0x0b
     efc:	9c 87       	std	Y+12, r25	; 0x0c
     efe:	ad 87       	std	Y+13, r26	; 0x0d
     f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	6b 85       	ldd	r22, Y+11	; 0x0b
     f04:	7c 85       	ldd	r23, Y+12	; 0x0c
     f06:	8d 85       	ldd	r24, Y+13	; 0x0d
     f08:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8f 83       	std	Y+7, r24	; 0x07
     f1c:	98 87       	std	Y+8, r25	; 0x08
     f1e:	a9 87       	std	Y+9, r26	; 0x09
     f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <handle_password_input+0x24e>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	3f c0       	rjmp	.+126    	; 0xfc2 <handle_password_input+0x2cc>
	else if (__tmp > 65535)
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	4c f5       	brge	.+82     	; 0xfae <handle_password_input+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f60:	8d 85       	ldd	r24, Y+13	; 0x0d
     f62:	9e 85       	ldd	r25, Y+14	; 0x0e
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <handle_password_input+0x2ae>
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <handle_password_input+0x29c>
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f7       	brne	.-38     	; 0xf86 <handle_password_input+0x290>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <handle_password_input+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <handle_password_input+0x2d8>
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
			key = KEYPAD_getPressedKey();
			_delay_ms(10);
		}
		_delay_ms(300);
		password[pass_counter] = key;
     fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8d a5       	ldd	r24, Y+45	; 0x2d
     fde:	9e a5       	ldd	r25, Y+46	; 0x2e
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	8c a5       	ldd	r24, Y+44	; 0x2c
     fe8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     fea:	8a e2       	ldi	r24, 0x2A	; 42
     fec:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayCharacter>
		pass_counter++;
     ff0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8b a7       	std	Y+43, r24	; 0x2b
void handle_password_input(uint8* password) {
	uint8 key = 0;
	uint8 pass_counter = 0;

	// Loop until a 5-digit password is entered
	while (pass_counter < 5) {
     ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	08 f4       	brcc	.+2      	; 0xffe <handle_password_input+0x308>
     ffc:	8b ce       	rjmp	.-746    	; 0xd14 <handle_password_input+0x1e>
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <handle_password_input+0x310>
		pass_counter++;
	}

	// Wait until the user confirms input with '='
	while (key != '=') {
		key = KEYPAD_getPressedKey();
    1000:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_getPressedKey>
    1004:	8c a7       	std	Y+44, r24	; 0x2c
		LCD_displayCharacter('*');
		pass_counter++;
	}

	// Wait until the user confirms input with '='
	while (key != '=') {
    1006:	8c a5       	ldd	r24, Y+44	; 0x2c
    1008:	8d 33       	cpi	r24, 0x3D	; 61
    100a:	d1 f7       	brne	.-12     	; 0x1000 <handle_password_input+0x30a>
		key = KEYPAD_getPressedKey();
	}
}
    100c:	ae 96       	adiw	r28, 0x2e	; 46
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <new_password>:

/*
 * Description:
 * Initiates the process of setting a new password and confirms with the control ECU.
 */
void new_password(void) {
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	2a 97       	sbiw	r28, 0x0a	; 10
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5] = {0};
    1032:	85 e0       	ldi	r24, 0x05	; 5
    1034:	fe 01       	movw	r30, r28
    1036:	31 96       	adiw	r30, 0x01	; 1
    1038:	df 01       	movw	r26, r30
    103a:	98 2f       	mov	r25, r24
    103c:	1d 92       	st	X+, r1
    103e:	9a 95       	dec	r25
    1040:	e9 f7       	brne	.-6      	; 0x103c <new_password+0x1e>
	uint8 re_entered[5] = {0};
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	fe 01       	movw	r30, r28
    1046:	36 96       	adiw	r30, 0x06	; 6
    1048:	df 01       	movw	r26, r30
    104a:	98 2f       	mov	r25, r24
    104c:	1d 92       	st	X+, r1
    104e:	9a 95       	dec	r25
    1050:	e9 f7       	brne	.-6      	; 0x104c <new_password+0x2e>
	match = 0;
    1052:	10 92 38 01 	sts	0x0138, r1

	// Prompt for the initial password input
	LCD_clearScreen();
    1056:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz Enter Pass:");
    105a:	20 e6       	ldi	r18, 0x60	; 96
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_moveCursor>
	handle_password_input(password);
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <handle_password_input>
	send_password_to_control_ECU(password);
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_password_to_control_ECU>

	// Prompt to re-enter the password for confirmation
	LCD_clearScreen();
    1080:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz re-Enter the");
    1084:	20 e7       	ldi	r18, 0x70	; 112
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "same pass:");
    1092:	21 e8       	ldi	r18, 0x81	; 129
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	a9 01       	movw	r20, r18
    109c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 10);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	6a e0       	ldi	r22, 0x0A	; 10
    10a4:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_moveCursor>
	handle_password_input(re_entered);
    10a8:	ce 01       	movw	r24, r28
    10aa:	06 96       	adiw	r24, 0x06	; 6
    10ac:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <handle_password_input>
	send_password_to_control_ECU(re_entered);
    10b0:	ce 01       	movw	r24, r28
    10b2:	06 96       	adiw	r24, 0x06	; 6
    10b4:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_password_to_control_ECU>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <new_password+0xac>

	// Receive confirmation from control ECU for password match
	while (!match) {
		match = UART_recieveByte();
    10ba:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    10be:	80 93 38 01 	sts	0x0138, r24
		if (match2 == 0) break;
    10c2:	80 91 39 01 	lds	r24, 0x0139
    10c6:	88 23       	and	r24, r24
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <new_password+0xb4>
	LCD_moveCursor(1, 10);
	handle_password_input(re_entered);
	send_password_to_control_ECU(re_entered);

	// Receive confirmation from control ECU for password match
	while (!match) {
    10ca:	80 91 38 01 	lds	r24, 0x0138
    10ce:	88 23       	and	r24, r24
    10d0:	a1 f3       	breq	.-24     	; 0x10ba <new_password+0x9c>
		match = UART_recieveByte();
		if (match2 == 0) break;
	}
	clear_password_input(password);
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <clear_password_input>
}
    10da:	2a 96       	adiw	r28, 0x0a	; 10
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <login_password>:

/*
 * Description:
 * Initiates the login process by requesting password entry and confirming with control ECU.
 */
void login_password(void) {
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <login_password+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <login_password+0x8>
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	uint8 password[5] = {0};
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	fe 01       	movw	r30, r28
    10fe:	31 96       	adiw	r30, 0x01	; 1
    1100:	df 01       	movw	r26, r30
    1102:	98 2f       	mov	r25, r24
    1104:	1d 92       	st	X+, r1
    1106:	9a 95       	dec	r25
    1108:	e9 f7       	brne	.-6      	; 0x1104 <login_password+0x18>
	match2 = 0;
    110a:	10 92 39 01 	sts	0x0139, r1

	LCD_clearScreen();
    110e:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Please Enter old");
    1112:	2c e8       	ldi	r18, 0x8C	; 140
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Pass:");
    1120:	2d e9       	ldi	r18, 0x9D	; 157
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 5);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_moveCursor>

	handle_password_input(password);
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <handle_password_input>
	send_password_to_control_ECU(password);
    113e:	ce 01       	movw	r24, r28
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_password_to_control_ECU>

	// Clear any remaining data in the UART buffer
	UART_flushBuffer();
    1146:	0e 94 af 05 	call	0xb5e	; 0xb5e <UART_flushBuffer>
    114a:	08 c0       	rjmp	.+16     	; 0x115c <login_password+0x70>

	// Wait for the response from control ECU
	while (!match2) {
		match2 = UART_recieveByte();
    114c:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    1150:	80 93 39 01 	sts	0x0139, r24
		if (match2 == 0) break;  // Exit if the password is incorrect
    1154:	80 91 39 01 	lds	r24, 0x0139
    1158:	88 23       	and	r24, r24
    115a:	21 f0       	breq	.+8      	; 0x1164 <login_password+0x78>

	// Clear any remaining data in the UART buffer
	UART_flushBuffer();

	// Wait for the response from control ECU
	while (!match2) {
    115c:	80 91 39 01 	lds	r24, 0x0139
    1160:	88 23       	and	r24, r24
    1162:	a1 f3       	breq	.-24     	; 0x114c <login_password+0x60>
		match2 = UART_recieveByte();
		if (match2 == 0) break;  // Exit if the password is incorrect
	}
	clear_password_input(password);
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <clear_password_input>
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <Home_page_display>:

/*
 * Description:
 * Displays the home page options on the LCD for opening the door or changing the password.
 */
void Home_page_display(void) {
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1184:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : OPEN DOOR");
    1188:	23 ea       	ldi	r18, 0xA3	; 163
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    1196:	21 eb       	ldi	r18, 0xB1	; 177
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <reset_flags>:

/*
 * Description:
 * Resets the flag variables and counters to initial states.
 */
void reset_flags() {
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	match = 0;
    11b2:	10 92 38 01 	sts	0x0138, r1
	match2 = 0;
    11b6:	10 92 39 01 	sts	0x0139, r1
	match3 = 0;
    11ba:	10 92 3a 01 	sts	0x013A, r1
	try_count = 0;
    11be:	10 92 3c 01 	sts	0x013C, r1
	g_count = 0;
    11c2:	10 92 3b 01 	sts	0x013B, r1
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <main>:

/*******************************************************************************
 *                          Main Function                                      *
 *******************************************************************************/
int main(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	61 97       	sbiw	r28, 0x11	; 17
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
	reset_flags();
    11e0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <reset_flags>
	uint8 pir_receive = 0;  // Variable to store PIR sensor status from control ECU
    11e4:	1f 86       	std	Y+15, r1	; 0x0f
	SREG |= (1 << 7);       // Enable global interrupts
    11e6:	af e5       	ldi	r26, 0x5F	; 95
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ef e5       	ldi	r30, 0x5F	; 95
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8c 93       	st	X, r24
	UART_init(&config);     // Initialize UART with configured parameters
    11f4:	8a e2       	ldi	r24, 0x2A	; 42
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <UART_init>
	LCD_init();             // Initialize LCD
    11fc:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <LCD_init>
	Timer_init(&configurate);   // Initialize timer with configured parameters
    1200:	81 e3       	ldi	r24, 0x31	; 49
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Timer_init>
	Timer_setCallBack(timer_CallBack, TIMER1_ID);   // Set timer callback function
    1208:	83 ea       	ldi	r24, 0xA3	; 163
    120a:	95 e0       	ldi	r25, 0x05	; 5
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <Timer_setCallBack>
    1212:	74 c0       	rjmp	.+232    	; 0x12fc <main+0x130>

	/* Password Setup Phase */
	while (match != 1) {
		// Wait for confirmation of successful password setup
		new_password();
    1214:	0e 94 0f 08 	call	0x101e	; 0x101e <new_password>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a8 ec       	ldi	r26, 0xC8	; 200
    121e:	b2 e4       	ldi	r27, 0x42	; 66
    1220:	8b 87       	std	Y+11, r24	; 0x0b
    1222:	9c 87       	std	Y+12, r25	; 0x0c
    1224:	ad 87       	std	Y+13, r26	; 0x0d
    1226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	6b 85       	ldd	r22, Y+11	; 0x0b
    122a:	7c 85       	ldd	r23, Y+12	; 0x0c
    122c:	8d 85       	ldd	r24, Y+13	; 0x0d
    122e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a ef       	ldi	r20, 0xFA	; 250
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8f 83       	std	Y+7, r24	; 0x07
    1242:	98 87       	std	Y+8, r25	; 0x08
    1244:	a9 87       	std	Y+9, r26	; 0x09
    1246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1248:	6f 81       	ldd	r22, Y+7	; 0x07
    124a:	78 85       	ldd	r23, Y+8	; 0x08
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	2c f4       	brge	.+10     	; 0x126a <main+0x9e>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <main+0x11c>
	else if (__tmp > 65535)
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	4c f5       	brge	.+82     	; 0x12d4 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	6b 85       	ldd	r22, Y+11	; 0x0b
    1284:	7c 85       	ldd	r23, Y+12	; 0x0c
    1286:	8d 85       	ldd	r24, Y+13	; 0x0d
    1288:	9e 85       	ldd	r25, Y+14	; 0x0e
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <main+0xfe>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <main+0xec>
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <main+0xe0>
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <main+0x128>
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	LCD_init();             // Initialize LCD
	Timer_init(&configurate);   // Initialize timer with configured parameters
	Timer_setCallBack(timer_CallBack, TIMER1_ID);   // Set timer callback function

	/* Password Setup Phase */
	while (match != 1) {
    12fc:	80 91 38 01 	lds	r24, 0x0138
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	09 f0       	breq	.+2      	; 0x1306 <main+0x13a>
    1304:	87 cf       	rjmp	.-242    	; 0x1214 <main+0x48>
		_delay_ms(100);
	}

	/* Main Control Loop */
	while (1) {
		LCD_clearScreen();
    1306:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
		Home_page_display();
    130a:	0e 94 be 08 	call	0x117c	; 0x117c <Home_page_display>
		key = 0;
    130e:	10 92 44 01 	sts	0x0144, r1
		reset_flags();
    1312:	0e 94 d5 08 	call	0x11aa	; 0x11aa <reset_flags>
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <main+0x154>

		while (key != '+' && key != '-') {
			key = KEYPAD_getPressedKey();
    1318:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <KEYPAD_getPressedKey>
    131c:	80 93 44 01 	sts	0x0144, r24
		LCD_clearScreen();
		Home_page_display();
		key = 0;
		reset_flags();

		while (key != '+' && key != '-') {
    1320:	80 91 44 01 	lds	r24, 0x0144
    1324:	8b 32       	cpi	r24, 0x2B	; 43
    1326:	21 f0       	breq	.+8      	; 0x1330 <main+0x164>
    1328:	80 91 44 01 	lds	r24, 0x0144
    132c:	8d 32       	cpi	r24, 0x2D	; 45
    132e:	a1 f7       	brne	.-24     	; 0x1318 <main+0x14c>
			key = KEYPAD_getPressedKey();
		}

		/* Main Option Selection */
		switch (key) {
    1330:	80 91 44 01 	lds	r24, 0x0144
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	39 8b       	std	Y+17, r19	; 0x11
    133a:	28 8b       	std	Y+16, r18	; 0x10
    133c:	88 89       	ldd	r24, Y+16	; 0x10
    133e:	99 89       	ldd	r25, Y+17	; 0x11
    1340:	8b 32       	cpi	r24, 0x2B	; 43
    1342:	91 05       	cpc	r25, r1
    1344:	39 f0       	breq	.+14     	; 0x1354 <main+0x188>
    1346:	28 89       	ldd	r18, Y+16	; 0x10
    1348:	39 89       	ldd	r19, Y+17	; 0x11
    134a:	2d 32       	cpi	r18, 0x2D	; 45
    134c:	31 05       	cpc	r19, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <main+0x186>
    1350:	a4 c0       	rjmp	.+328    	; 0x149a <main+0x2ce>
    1352:	d9 cf       	rjmp	.-78     	; 0x1306 <main+0x13a>
		case '+':  // Door Open Sequence
			UART_sendByte('+');
    1354:	8b e2       	ldi	r24, 0x2B	; 43
    1356:	0e 94 07 18 	call	0x300e	; 0x300e <UART_sendByte>
			match2 = 0;
    135a:	10 92 39 01 	sts	0x0139, r1
			key = 0;
    135e:	10 92 44 01 	sts	0x0144, r1
    1362:	41 c0       	rjmp	.+130    	; 0x13e6 <main+0x21a>

			while ((match2 == 0) && (try_count < 3))
			{
				login_password();
    1364:	0e 94 76 08 	call	0x10ec	; 0x10ec <login_password>
				if (match2 == 0) {
    1368:	80 91 39 01 	lds	r24, 0x0139
    136c:	88 23       	and	r24, r24
    136e:	d9 f5       	brne	.+118    	; 0x13e6 <main+0x21a>
					match2 = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 39 01 	sts	0x0139, r24
					match3 = UART_recieveByte();
    1376:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    137a:	80 93 3a 01 	sts	0x013A, r24
					if (match3 == 0) {
    137e:	80 91 3a 01 	lds	r24, 0x013A
    1382:	88 23       	and	r24, r24
    1384:	41 f4       	brne	.+16     	; 0x1396 <main+0x1ca>
						try_count++;
    1386:	80 91 3c 01 	lds	r24, 0x013C
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	80 93 3c 01 	sts	0x013C, r24
						match2=0;
    1390:	10 92 39 01 	sts	0x0139, r1
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <main+0x1dc>
					} else if (match3 == 'L') {
    1396:	80 91 3a 01 	lds	r24, 0x013A
    139a:	8c 34       	cpi	r24, 0x4C	; 76
    139c:	29 f4       	brne	.+10     	; 0x13a8 <main+0x1dc>
						match2 = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 39 01 	sts	0x0139, r24
						match3 = 0;
    13a4:	10 92 3a 01 	sts	0x013A, r1
					}
					if (try_count == 3)
    13a8:	80 91 3c 01 	lds	r24, 0x013C
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	d9 f4       	brne	.+54     	; 0x13e6 <main+0x21a>
					{
						LCD_clearScreen();
    13b0:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "System LOCKED");
    13b4:	21 ec       	ldi	r18, 0xC1	; 193
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    13c2:	2f ec       	ldi	r18, 0xCF	; 207
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
						g_count = 0;
    13d0:	10 92 3b 01 	sts	0x013B, r1
						while (g_count < 60) {};
    13d4:	80 91 3b 01 	lds	r24, 0x013B
    13d8:	8c 33       	cpi	r24, 0x3C	; 60
    13da:	e0 f3       	brcs	.-8      	; 0x13d4 <main+0x208>
						try_count = 0;
    13dc:	10 92 3c 01 	sts	0x013C, r1
						reset_flags();
    13e0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <reset_flags>
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <main+0x22c>
		case '+':  // Door Open Sequence
			UART_sendByte('+');
			match2 = 0;
			key = 0;

			while ((match2 == 0) && (try_count < 3))
    13e6:	80 91 39 01 	lds	r24, 0x0139
    13ea:	88 23       	and	r24, r24
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <main+0x22c>
    13ee:	80 91 3c 01 	lds	r24, 0x013C
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <main+0x22c>
    13f6:	b6 cf       	rjmp	.-148    	; 0x1364 <main+0x198>
						break;
					}
				}
			}

			g_count = 0;
    13f8:	10 92 3b 01 	sts	0x013B, r1
			LCD_clearScreen();
    13fc:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Door Unlocking");
    1400:	2e ed       	ldi	r18, 0xDE	; 222
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Please wait   ");
    140e:	2d ee       	ldi	r18, 0xED	; 237
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
			while (g_count != 15) {};
    141c:	80 91 3b 01 	lds	r24, 0x013B
    1420:	8f 30       	cpi	r24, 0x0F	; 15
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0x250>

			pir_receive = UART_recieveByte();
    1424:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    1428:	8f 87       	std	Y+15, r24	; 0x0f
			if (pir_receive) {
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	88 23       	and	r24, r24
    142e:	b9 f0       	breq	.+46     	; 0x145e <main+0x292>
				LCD_clearScreen();
    1430:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Wait for people");
    1434:	2c ef       	ldi	r18, 0xFC	; 252
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "to enter");
    1442:	2c e0       	ldi	r18, 0x0C	; 12
    1444:	31 e0       	ldi	r19, 0x01	; 1
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	a9 01       	movw	r20, r18
    144c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <main+0x28c>
				while (pir_receive) {
					pir_receive = UART_recieveByte();
    1452:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    1456:	8f 87       	std	Y+15, r24	; 0x0f
			pir_receive = UART_recieveByte();
			if (pir_receive) {
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0, "Wait for people");
				LCD_displayStringRowColumn(1, 0, "to enter");
				while (pir_receive) {
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	88 23       	and	r24, r24
    145c:	d1 f7       	brne	.-12     	; 0x1452 <main+0x286>
					pir_receive = UART_recieveByte();
				};
			}

			if (pir_receive == 0) {
    145e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1460:	88 23       	and	r24, r24
    1462:	b1 f4       	brne	.+44     	; 0x1490 <main+0x2c4>
				g_count = 0;
    1464:	10 92 3b 01 	sts	0x013B, r1
				LCD_clearScreen();
    1468:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Door Locking");
    146c:	25 e1       	ldi	r18, 0x15	; 21
    146e:	31 e0       	ldi	r19, 0x01	; 1
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Please wait   ");
    147a:	2d ee       	ldi	r18, 0xED	; 237
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
				while (g_count != 15) {};
    1488:	80 91 3b 01 	lds	r24, 0x013B
    148c:	8f 30       	cpi	r24, 0x0F	; 15
    148e:	e1 f7       	brne	.-8      	; 0x1488 <main+0x2bc>
			}

			try_count = 0;
    1490:	10 92 3c 01 	sts	0x013C, r1
			match2 = 0;
    1494:	10 92 39 01 	sts	0x0139, r1
    1498:	36 cf       	rjmp	.-404    	; 0x1306 <main+0x13a>
			break;

		case '-':  // Change Password Sequence
			UART_sendByte('-');
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	0e 94 07 18 	call	0x300e	; 0x300e <UART_sendByte>
			reset_flags();
    14a0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <reset_flags>
    14a4:	41 c0       	rjmp	.+130    	; 0x1528 <main+0x35c>

			while ((match2 == 0) && (try_count < 3))
			{
				login_password();
    14a6:	0e 94 76 08 	call	0x10ec	; 0x10ec <login_password>
				if (match2 == 0) {
    14aa:	80 91 39 01 	lds	r24, 0x0139
    14ae:	88 23       	and	r24, r24
    14b0:	d9 f5       	brne	.+118    	; 0x1528 <main+0x35c>
					match2 = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 93 39 01 	sts	0x0139, r24
					match3 = UART_recieveByte();
    14b8:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    14bc:	80 93 3a 01 	sts	0x013A, r24
					if (match3 == 0) {
    14c0:	80 91 3a 01 	lds	r24, 0x013A
    14c4:	88 23       	and	r24, r24
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <main+0x30c>
						try_count++;
    14c8:	80 91 3c 01 	lds	r24, 0x013C
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	80 93 3c 01 	sts	0x013C, r24
						match2=0;
    14d2:	10 92 39 01 	sts	0x0139, r1
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <main+0x31e>
					} else if (match3 == 'L') {
    14d8:	80 91 3a 01 	lds	r24, 0x013A
    14dc:	8c 34       	cpi	r24, 0x4C	; 76
    14de:	29 f4       	brne	.+10     	; 0x14ea <main+0x31e>
						match2 = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 39 01 	sts	0x0139, r24
						match3 = 0;
    14e6:	10 92 3a 01 	sts	0x013A, r1
					}
					if (try_count == 3)
    14ea:	80 91 3c 01 	lds	r24, 0x013C
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	d9 f4       	brne	.+54     	; 0x1528 <main+0x35c>
					{
						LCD_clearScreen();
    14f2:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "System LOCKED");
    14f6:	21 ec       	ldi	r18, 0xC1	; 193
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	a9 01       	movw	r20, r18
    1500:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    1504:	2f ec       	ldi	r18, 0xCF	; 207
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayStringRowColumn>
						g_count = 0;
    1512:	10 92 3b 01 	sts	0x013B, r1
						while (g_count < 60) {};
    1516:	80 91 3b 01 	lds	r24, 0x013B
    151a:	8c 33       	cpi	r24, 0x3C	; 60
    151c:	e0 f3       	brcs	.-8      	; 0x1516 <main+0x34a>
						try_count = 0;
    151e:	10 92 3c 01 	sts	0x013C, r1
						reset_flags();
    1522:	0e 94 d5 08 	call	0x11aa	; 0x11aa <reset_flags>
    1526:	09 c0       	rjmp	.+18     	; 0x153a <main+0x36e>

		case '-':  // Change Password Sequence
			UART_sendByte('-');
			reset_flags();

			while ((match2 == 0) && (try_count < 3))
    1528:	80 91 39 01 	lds	r24, 0x0139
    152c:	88 23       	and	r24, r24
    152e:	29 f4       	brne	.+10     	; 0x153a <main+0x36e>
    1530:	80 91 3c 01 	lds	r24, 0x013C
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	08 f4       	brcc	.+2      	; 0x153a <main+0x36e>
    1538:	b6 cf       	rjmp	.-148    	; 0x14a6 <main+0x2da>
						break;
					}
				}
			}

			g_count = 0;
    153a:	10 92 3b 01 	sts	0x013B, r1
			new_password();
    153e:	0e 94 0f 08 	call	0x101e	; 0x101e <new_password>
    1542:	e1 ce       	rjmp	.-574    	; 0x1306 <main+0x13a>

00001544 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <GPIO_setupPinDirection+0x6>
    154a:	00 d0       	rcall	.+0      	; 0x154c <GPIO_setupPinDirection+0x8>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	6a 83       	std	Y+2, r22	; 0x02
    1556:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 30       	cpi	r24, 0x08	; 8
    155c:	08 f0       	brcs	.+2      	; 0x1560 <GPIO_setupPinDirection+0x1c>
    155e:	d5 c0       	rjmp	.+426    	; 0x170a <GPIO_setupPinDirection+0x1c6>
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	08 f0       	brcs	.+2      	; 0x1568 <GPIO_setupPinDirection+0x24>
    1566:	d1 c0       	rjmp	.+418    	; 0x170a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3d 83       	std	Y+5, r19	; 0x05
    1570:	2c 83       	std	Y+4, r18	; 0x04
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <GPIO_setupPinDirection+0x3a>
    157c:	43 c0       	rjmp	.+134    	; 0x1604 <GPIO_setupPinDirection+0xc0>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <GPIO_setupPinDirection+0x4e>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	71 f0       	breq	.+28     	; 0x15ac <GPIO_setupPinDirection+0x68>
    1590:	bc c0       	rjmp	.+376    	; 0x170a <GPIO_setupPinDirection+0x1c6>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <GPIO_setupPinDirection+0x5a>
    159c:	5f c0       	rjmp	.+190    	; 0x165c <GPIO_setupPinDirection+0x118>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <GPIO_setupPinDirection+0x66>
    15a8:	85 c0       	rjmp	.+266    	; 0x16b4 <GPIO_setupPinDirection+0x170>
    15aa:	af c0       	rjmp	.+350    	; 0x170a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	a1 f4       	brne	.+40     	; 0x15da <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15b2:	aa e3       	ldi	r26, 0x3A	; 58
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e3       	ldi	r30, 0x3A	; 58
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_setupPinDirection+0x8c>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_setupPinDirection+0x88>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	98 c0       	rjmp	.+304    	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15da:	aa e3       	ldi	r26, 0x3A	; 58
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ea e3       	ldi	r30, 0x3A	; 58
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <GPIO_setupPinDirection+0xb4>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <GPIO_setupPinDirection+0xb0>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	83 c0       	rjmp	.+262    	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	a1 f4       	brne	.+40     	; 0x1632 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    160a:	a7 e3       	ldi	r26, 0x37	; 55
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e7 e3       	ldi	r30, 0x37	; 55
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_setupPinDirection+0xe4>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_setupPinDirection+0xe0>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	6c c0       	rjmp	.+216    	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1632:	a7 e3       	ldi	r26, 0x37	; 55
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e7 e3       	ldi	r30, 0x37	; 55
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <GPIO_setupPinDirection+0x10c>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <GPIO_setupPinDirection+0x108>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	57 c0       	rjmp	.+174    	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a1 f4       	brne	.+40     	; 0x168a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1662:	a4 e3       	ldi	r26, 0x34	; 52
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e4 e3       	ldi	r30, 0x34	; 52
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_setupPinDirection+0x13c>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_setupPinDirection+0x138>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	40 c0       	rjmp	.+128    	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    168a:	a4 e3       	ldi	r26, 0x34	; 52
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e4 e3       	ldi	r30, 0x34	; 52
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <GPIO_setupPinDirection+0x164>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <GPIO_setupPinDirection+0x160>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	2b c0       	rjmp	.+86     	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16ba:	a1 e3       	ldi	r26, 0x31	; 49
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_setupPinDirection+0x194>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_setupPinDirection+0x190>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16e2:	a1 e3       	ldi	r26, 0x31	; 49
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e1 e3       	ldi	r30, 0x31	; 49
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <GPIO_setupPinDirection+0x1bc>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <GPIO_setupPinDirection+0x1b8>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <GPIO_writePin+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <GPIO_writePin+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
    172c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 30       	cpi	r24, 0x08	; 8
    1732:	08 f0       	brcs	.+2      	; 0x1736 <GPIO_writePin+0x1c>
    1734:	d5 c0       	rjmp	.+426    	; 0x18e0 <GPIO_writePin+0x1c6>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	08 f0       	brcs	.+2      	; 0x173e <GPIO_writePin+0x24>
    173c:	d1 c0       	rjmp	.+418    	; 0x18e0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3d 83       	std	Y+5, r19	; 0x05
    1746:	2c 83       	std	Y+4, r18	; 0x04
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <GPIO_writePin+0x3a>
    1752:	43 c0       	rjmp	.+134    	; 0x17da <GPIO_writePin+0xc0>
    1754:	2c 81       	ldd	r18, Y+4	; 0x04
    1756:	3d 81       	ldd	r19, Y+5	; 0x05
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <GPIO_writePin+0x4e>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	71 f0       	breq	.+28     	; 0x1782 <GPIO_writePin+0x68>
    1766:	bc c0       	rjmp	.+376    	; 0x18e0 <GPIO_writePin+0x1c6>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <GPIO_writePin+0x5a>
    1772:	5f c0       	rjmp	.+190    	; 0x1832 <GPIO_writePin+0x118>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <GPIO_writePin+0x66>
    177e:	85 c0       	rjmp	.+266    	; 0x188a <GPIO_writePin+0x170>
    1780:	af c0       	rjmp	.+350    	; 0x18e0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	a1 f4       	brne	.+40     	; 0x17b0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1788:	ab e3       	ldi	r26, 0x3B	; 59
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	eb e3       	ldi	r30, 0x3B	; 59
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_writePin+0x8c>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_writePin+0x88>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	98 c0       	rjmp	.+304    	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17b0:	ab e3       	ldi	r26, 0x3B	; 59
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	eb e3       	ldi	r30, 0x3B	; 59
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_writePin+0xb4>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_writePin+0xb0>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	83 c0       	rjmp	.+262    	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	a1 f4       	brne	.+40     	; 0x1808 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17e0:	a8 e3       	ldi	r26, 0x38	; 56
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_writePin+0xe4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_writePin+0xe0>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	6c c0       	rjmp	.+216    	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1808:	a8 e3       	ldi	r26, 0x38	; 56
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e8 e3       	ldi	r30, 0x38	; 56
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <GPIO_writePin+0x10c>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <GPIO_writePin+0x108>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	57 c0       	rjmp	.+174    	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	a1 f4       	brne	.+40     	; 0x1860 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_writePin+0x13c>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_writePin+0x138>
    185a:	84 2b       	or	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	40 c0       	rjmp	.+128    	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1860:	a5 e3       	ldi	r26, 0x35	; 53
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <GPIO_writePin+0x164>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <GPIO_writePin+0x160>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	2b c0       	rjmp	.+86     	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	a1 f4       	brne	.+40     	; 0x18b8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1890:	a2 e3       	ldi	r26, 0x32	; 50
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GPIO_writePin+0x194>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GPIO_writePin+0x190>
    18b2:	84 2b       	or	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18b8:	a2 e3       	ldi	r26, 0x32	; 50
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e3       	ldi	r30, 0x32	; 50
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <GPIO_writePin+0x1bc>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <GPIO_writePin+0x1b8>
    18da:	80 95       	com	r24
    18dc:	84 23       	and	r24, r20
    18de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <GPIO_readPin+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_readPin+0x8>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	8a 83       	std	Y+2, r24	; 0x02
    1900:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1902:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	88 30       	cpi	r24, 0x08	; 8
    1908:	08 f0       	brcs	.+2      	; 0x190c <GPIO_readPin+0x1c>
    190a:	84 c0       	rjmp	.+264    	; 0x1a14 <GPIO_readPin+0x124>
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	08 f0       	brcs	.+2      	; 0x1914 <GPIO_readPin+0x24>
    1912:	80 c0       	rjmp	.+256    	; 0x1a14 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3d 83       	std	Y+5, r19	; 0x05
    191c:	2c 83       	std	Y+4, r18	; 0x04
    191e:	4c 81       	ldd	r20, Y+4	; 0x04
    1920:	5d 81       	ldd	r21, Y+5	; 0x05
    1922:	41 30       	cpi	r20, 0x01	; 1
    1924:	51 05       	cpc	r21, r1
    1926:	79 f1       	breq	.+94     	; 0x1986 <GPIO_readPin+0x96>
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	91 05       	cpc	r25, r1
    1930:	34 f4       	brge	.+12     	; 0x193e <GPIO_readPin+0x4e>
    1932:	2c 81       	ldd	r18, Y+4	; 0x04
    1934:	3d 81       	ldd	r19, Y+5	; 0x05
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	69 f0       	breq	.+26     	; 0x1956 <GPIO_readPin+0x66>
    193c:	6b c0       	rjmp	.+214    	; 0x1a14 <GPIO_readPin+0x124>
    193e:	4c 81       	ldd	r20, Y+4	; 0x04
    1940:	5d 81       	ldd	r21, Y+5	; 0x05
    1942:	42 30       	cpi	r20, 0x02	; 2
    1944:	51 05       	cpc	r21, r1
    1946:	b9 f1       	breq	.+110    	; 0x19b6 <GPIO_readPin+0xc6>
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <GPIO_readPin+0x64>
    1952:	49 c0       	rjmp	.+146    	; 0x19e6 <GPIO_readPin+0xf6>
    1954:	5f c0       	rjmp	.+190    	; 0x1a14 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1956:	e9 e3       	ldi	r30, 0x39	; 57
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_readPin+0x7e>
    196a:	55 95       	asr	r21
    196c:	47 95       	ror	r20
    196e:	8a 95       	dec	r24
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_readPin+0x7a>
    1972:	ca 01       	movw	r24, r20
    1974:	81 70       	andi	r24, 0x01	; 1
    1976:	90 70       	andi	r25, 0x00	; 0
    1978:	88 23       	and	r24, r24
    197a:	19 f0       	breq	.+6      	; 0x1982 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	49 c0       	rjmp	.+146    	; 0x1a14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1982:	19 82       	std	Y+1, r1	; 0x01
    1984:	47 c0       	rjmp	.+142    	; 0x1a14 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1986:	e6 e3       	ldi	r30, 0x36	; 54
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a9 01       	movw	r20, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_readPin+0xae>
    199a:	55 95       	asr	r21
    199c:	47 95       	ror	r20
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_readPin+0xaa>
    19a2:	ca 01       	movw	r24, r20
    19a4:	81 70       	andi	r24, 0x01	; 1
    19a6:	90 70       	andi	r25, 0x00	; 0
    19a8:	88 23       	and	r24, r24
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	31 c0       	rjmp	.+98     	; 0x1a14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19b2:	19 82       	std	Y+1, r1	; 0x01
    19b4:	2f c0       	rjmp	.+94     	; 0x1a14 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19b6:	e3 e3       	ldi	r30, 0x33	; 51
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_readPin+0xde>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_readPin+0xda>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	90 70       	andi	r25, 0x00	; 0
    19d8:	88 23       	and	r24, r24
    19da:	19 f0       	breq	.+6      	; 0x19e2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	19 c0       	rjmp	.+50     	; 0x1a14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e2:	19 82       	std	Y+1, r1	; 0x01
    19e4:	17 c0       	rjmp	.+46     	; 0x1a14 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19e6:	e0 e3       	ldi	r30, 0x30	; 48
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_readPin+0x10e>
    19fa:	55 95       	asr	r21
    19fc:	47 95       	ror	r20
    19fe:	8a 95       	dec	r24
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_readPin+0x10a>
    1a02:	ca 01       	movw	r24, r20
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a12:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <GPIO_setupPortDirection+0x6>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <GPIO_setupPortDirection+0x8>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	90 f5       	brcc	.+100    	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3c 83       	std	Y+4, r19	; 0x04
    1a44:	2b 83       	std	Y+3, r18	; 0x03
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	d1 f0       	breq	.+52     	; 0x1a84 <GPIO_setupPortDirection+0x5e>
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <GPIO_setupPortDirection+0x3e>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	61 f0       	breq	.+24     	; 0x1a7a <GPIO_setupPortDirection+0x54>
    1a62:	1e c0       	rjmp	.+60     	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
    1a64:	2b 81       	ldd	r18, Y+3	; 0x03
    1a66:	3c 81       	ldd	r19, Y+4	; 0x04
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	81 f0       	breq	.+32     	; 0x1a8e <GPIO_setupPortDirection+0x68>
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	91 05       	cpc	r25, r1
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <GPIO_setupPortDirection+0x72>
    1a78:	13 c0       	rjmp	.+38     	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a7a:	ea e3       	ldi	r30, 0x3A	; 58
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	80 83       	st	Z, r24
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a84:	e7 e3       	ldi	r30, 0x37	; 55
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	80 83       	st	Z, r24
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	80 83       	st	Z, r24
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a98:	e1 e3       	ldi	r30, 0x31	; 49
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <GPIO_writePort+0x6>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <GPIO_writePort+0x8>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	84 30       	cpi	r24, 0x04	; 4
    1ac2:	90 f5       	brcc	.+100    	; 0x1b28 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	3c 83       	std	Y+4, r19	; 0x04
    1acc:	2b 83       	std	Y+3, r18	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	d1 f0       	breq	.+52     	; 0x1b0c <GPIO_writePort+0x5e>
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <GPIO_writePort+0x3e>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	61 f0       	breq	.+24     	; 0x1b02 <GPIO_writePort+0x54>
    1aea:	1e c0       	rjmp	.+60     	; 0x1b28 <GPIO_writePort+0x7a>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	81 f0       	breq	.+32     	; 0x1b16 <GPIO_writePort+0x68>
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	91 05       	cpc	r25, r1
    1afe:	81 f0       	breq	.+32     	; 0x1b20 <GPIO_writePort+0x72>
    1b00:	13 c0       	rjmp	.+38     	; 0x1b28 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b02:	eb e3       	ldi	r30, 0x3B	; 59
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 83       	st	Z, r24
    1b0a:	0e c0       	rjmp	.+28     	; 0x1b28 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	80 83       	st	Z, r24
    1b14:	09 c0       	rjmp	.+18     	; 0x1b28 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	80 83       	st	Z, r24
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b20:	e2 e3       	ldi	r30, 0x32	; 50
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_readPort+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <GPIO_readPort+0x8>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b44:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	90 f5       	brcc	.+100    	; 0x1bb0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3c 83       	std	Y+4, r19	; 0x04
    1b54:	2b 83       	std	Y+3, r18	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	d1 f0       	breq	.+52     	; 0x1b94 <GPIO_readPort+0x5e>
    1b60:	2b 81       	ldd	r18, Y+3	; 0x03
    1b62:	3c 81       	ldd	r19, Y+4	; 0x04
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <GPIO_readPort+0x3e>
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	61 f0       	breq	.+24     	; 0x1b8a <GPIO_readPort+0x54>
    1b72:	1e c0       	rjmp	.+60     	; 0x1bb0 <GPIO_readPort+0x7a>
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	81 f0       	breq	.+32     	; 0x1b9e <GPIO_readPort+0x68>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	91 05       	cpc	r25, r1
    1b86:	81 f0       	breq	.+32     	; 0x1ba8 <GPIO_readPort+0x72>
    1b88:	13 c0       	rjmp	.+38     	; 0x1bb0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b8a:	e9 e3       	ldi	r30, 0x39	; 57
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	0e c0       	rjmp	.+28     	; 0x1bb0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b94:	e6 e3       	ldi	r30, 0x36	; 54
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b9e:	e3 e3       	ldi	r30, 0x33	; 51
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ba8:	e0 e3       	ldi	r30, 0x30	; 48
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	60 97       	sbiw	r28, 0x10	; 16
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	63 e0       	ldi	r22, 0x03	; 3
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	64 e0       	ldi	r22, 0x04	; 4
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	65 e0       	ldi	r22, 0x05	; 5
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	66 e0       	ldi	r22, 0x06	; 6
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	67 e0       	ldi	r22, 0x07	; 7
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c24:	1f 86       	std	Y+15, r1	; 0x0f
    1c26:	ab c0       	rjmp	.+342    	; 0x1d7e <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c3c:	18 8a       	std	Y+16, r1	; 0x10
    1c3e:	22 c0       	rjmp	.+68     	; 0x1c84 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c40:	88 89       	ldd	r24, Y+16	; 0x10
    1c42:	98 2f       	mov	r25, r24
    1c44:	9c 5f       	subi	r25, 0xFC	; 252
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	69 2f       	mov	r22, r25
    1c4a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <GPIO_readPin>
    1c4e:	88 23       	and	r24, r24
    1c50:	b1 f4       	brne	.+44     	; 0x1c7e <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	98 2f       	mov	r25, r24
    1c62:	88 89       	ldd	r24, Y+16	; 0x10
    1c64:	89 0f       	add	r24, r25
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1c6c:	60 96       	adiw	r28, 0x10	; 16
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c7e:	88 89       	ldd	r24, Y+16	; 0x10
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	88 8b       	std	Y+16, r24	; 0x10
    1c84:	88 89       	ldd	r24, Y+16	; 0x10
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	d8 f2       	brcs	.-74     	; 0x1c40 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e2       	ldi	r26, 0x20	; 32
    1c9a:	b1 e4       	ldi	r27, 0x41	; 65
    1c9c:	8b 87       	std	Y+11, r24	; 0x0b
    1c9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ca0:	ad 87       	std	Y+13, r26	; 0x0d
    1ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
    1cbe:	98 87       	std	Y+8, r25	; 0x08
    1cc0:	a9 87       	std	Y+9, r26	; 0x09
    1cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <KEYPAD_getPressedKey+0x186>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <KEYPAD_getPressedKey+0x174>
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <KEYPAD_getPressedKey+0x168>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <KEYPAD_getPressedKey+0x1b0>
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	8f 87       	std	Y+15, r24	; 0x0f
    1d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	08 f4       	brcc	.+2      	; 0x1d86 <KEYPAD_getPressedKey+0x1c6>
    1d84:	51 cf       	rjmp	.-350    	; 0x1c28 <KEYPAD_getPressedKey+0x68>
    1d86:	4e cf       	rjmp	.-356    	; 0x1c24 <KEYPAD_getPressedKey+0x64>

00001d88 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d96:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3c 83       	std	Y+4, r19	; 0x04
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	88 30       	cpi	r24, 0x08	; 8
    1da8:	91 05       	cpc	r25, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dac:	70 c0       	rjmp	.+224    	; 0x1e8e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	29 30       	cpi	r18, 0x09	; 9
    1db4:	31 05       	cpc	r19, r1
    1db6:	5c f5       	brge	.+86     	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dc2:	59 c0       	rjmp	.+178    	; 0x1e76 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	25 30       	cpi	r18, 0x05	; 5
    1dca:	31 05       	cpc	r19, r1
    1dcc:	9c f4       	brge	.+38     	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dd8:	48 c0       	rjmp	.+144    	; 0x1e6a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	23 30       	cpi	r18, 0x03	; 3
    1de0:	31 05       	cpc	r19, r1
    1de2:	0c f0       	brlt	.+2      	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1de4:	45 c0       	rjmp	.+138    	; 0x1e70 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	91 05       	cpc	r25, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1df0:	39 c0       	rjmp	.+114    	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1df2:	67 c0       	rjmp	.+206    	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	26 30       	cpi	r18, 0x06	; 6
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1dfe:	41 c0       	rjmp	.+130    	; 0x1e82 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	87 30       	cpi	r24, 0x07	; 7
    1e06:	91 05       	cpc	r25, r1
    1e08:	0c f0       	brlt	.+2      	; 0x1e0c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e0a:	3e c0       	rjmp	.+124    	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e0c:	37 c0       	rjmp	.+110    	; 0x1e7c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	2c 30       	cpi	r18, 0x0C	; 12
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e18:	46 c0       	rjmp	.+140    	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	8d 30       	cpi	r24, 0x0D	; 13
    1e20:	91 05       	cpc	r25, r1
    1e22:	5c f4       	brge	.+22     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	3c 81       	ldd	r19, Y+4	; 0x04
    1e28:	2a 30       	cpi	r18, 0x0A	; 10
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	b1 f1       	breq	.+108    	; 0x1e9a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	8b 30       	cpi	r24, 0x0B	; 11
    1e34:	91 05       	cpc	r25, r1
    1e36:	a4 f5       	brge	.+104    	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e38:	2d c0       	rjmp	.+90     	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3e:	2e 30       	cpi	r18, 0x0E	; 14
    1e40:	31 05       	cpc	r19, r1
    1e42:	b9 f1       	breq	.+110    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	8e 30       	cpi	r24, 0x0E	; 14
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	7c f1       	brlt	.+94     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	2f 30       	cpi	r18, 0x0F	; 15
    1e54:	31 05       	cpc	r19, r1
    1e56:	79 f1       	breq	.+94     	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	80 31       	cpi	r24, 0x10	; 16
    1e5e:	91 05       	cpc	r25, r1
    1e60:	69 f1       	breq	.+90     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e62:	2f c0       	rjmp	.+94     	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e64:	87 e0       	ldi	r24, 0x07	; 7
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	2e c0       	rjmp	.+92     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e6a:	88 e0       	ldi	r24, 0x08	; 8
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	2b c0       	rjmp	.+86     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e70:	89 e0       	ldi	r24, 0x09	; 9
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	28 c0       	rjmp	.+80     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e76:	85 e2       	ldi	r24, 0x25	; 37
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	25 c0       	rjmp	.+74     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	22 c0       	rjmp	.+68     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e82:	85 e0       	ldi	r24, 0x05	; 5
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	1f c0       	rjmp	.+62     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e88:	86 e0       	ldi	r24, 0x06	; 6
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	1c c0       	rjmp	.+56     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e8e:	8a e2       	ldi	r24, 0x2A	; 42
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	16 c0       	rjmp	.+44     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	13 c0       	rjmp	.+38     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	10 c0       	rjmp	.+32     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ea6:	8d e2       	ldi	r24, 0x2D	; 45
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0d c0       	rjmp	.+26     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1eac:	8d e0       	ldi	r24, 0x0D	; 13
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	0a c0       	rjmp	.+20     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1eb6:	8d e3       	ldi	r24, 0x3D	; 61
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ebc:	8b e2       	ldi	r24, 0x2B	; 43
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GPIO_setupPinDirection>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 ea       	ldi	r26, 0xA0	; 160
    1f04:	b1 e4       	ldi	r27, 0x41	; 65
    1f06:	8b 87       	std	Y+11, r24	; 0x0b
    1f08:	9c 87       	std	Y+12, r25	; 0x0c
    1f0a:	ad 87       	std	Y+13, r26	; 0x0d
    1f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8f 83       	std	Y+7, r24	; 0x07
    1f28:	98 87       	std	Y+8, r25	; 0x08
    1f2a:	a9 87       	std	Y+9, r26	; 0x09
    1f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_init+0x7a>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_init+0xda>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_init+0xc8>
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_init+0xbc>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_init+0x104>
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	6f ef       	ldi	r22, 0xFF	; 255
    1fe6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1fea:	88 e3       	ldi	r24, 0x38	; 56
    1fec:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ff0:	8c e0       	ldi	r24, 0x0C	; 12
    1ff2:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_sendCommand>
}
    1ffc:	2e 96       	adiw	r28, 0x0e	; 14
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	e9 97       	sbiw	r28, 0x39	; 57
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	8d ab       	std	Y+53, r24	; 0x35
    2038:	9e ab       	std	Y+54, r25	; 0x36
    203a:	af ab       	std	Y+55, r26	; 0x37
    203c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6d a9       	ldd	r22, Y+53	; 0x35
    2040:	7e a9       	ldd	r23, Y+54	; 0x36
    2042:	8f a9       	ldd	r24, Y+55	; 0x37
    2044:	98 ad       	ldd	r25, Y+56	; 0x38
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	89 ab       	std	Y+49, r24	; 0x31
    2058:	9a ab       	std	Y+50, r25	; 0x32
    205a:	ab ab       	std	Y+51, r26	; 0x33
    205c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    205e:	69 a9       	ldd	r22, Y+49	; 0x31
    2060:	7a a9       	ldd	r23, Y+50	; 0x32
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_sendCommand+0x72>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	98 ab       	std	Y+48, r25	; 0x30
    207c:	8f a7       	std	Y+47, r24	; 0x2f
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2080:	69 a9       	ldd	r22, Y+49	; 0x31
    2082:	7a a9       	ldd	r23, Y+50	; 0x32
    2084:	8b a9       	ldd	r24, Y+51	; 0x33
    2086:	9c a9       	ldd	r25, Y+52	; 0x34
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6d a9       	ldd	r22, Y+53	; 0x35
    209a:	7e a9       	ldd	r23, Y+54	; 0x36
    209c:	8f a9       	ldd	r24, Y+55	; 0x37
    209e:	98 ad       	ldd	r25, Y+56	; 0x38
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_sendCommand+0xd2>
    20c2:	88 ec       	ldi	r24, 0xC8	; 200
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e a7       	std	Y+46, r25	; 0x2e
    20c8:	8d a7       	std	Y+45, r24	; 0x2d
    20ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    20cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_sendCommand+0xc0>
    20d2:	9e a7       	std	Y+46, r25	; 0x2e
    20d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	98 ab       	std	Y+48, r25	; 0x30
    20de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e2:	98 a9       	ldd	r25, Y+48	; 0x30
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_sendCommand+0xb4>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	69 a9       	ldd	r22, Y+49	; 0x31
    20ec:	7a a9       	ldd	r23, Y+50	; 0x32
    20ee:	8b a9       	ldd	r24, Y+51	; 0x33
    20f0:	9c a9       	ldd	r25, Y+52	; 0x34
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	98 ab       	std	Y+48, r25	; 0x30
    20fc:	8f a7       	std	Y+47, r24	; 0x2f
    20fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2100:	98 a9       	ldd	r25, Y+48	; 0x30
    2102:	9c a7       	std	Y+44, r25	; 0x2c
    2104:	8b a7       	std	Y+43, r24	; 0x2b
    2106:	8b a5       	ldd	r24, Y+43	; 0x2b
    2108:	9c a5       	ldd	r25, Y+44	; 0x2c
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_sendCommand+0xfc>
    210e:	9c a7       	std	Y+44, r25	; 0x2c
    2110:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e8       	ldi	r26, 0x80	; 128
    2122:	bf e3       	ldi	r27, 0x3F	; 63
    2124:	8f a3       	std	Y+39, r24	; 0x27
    2126:	98 a7       	std	Y+40, r25	; 0x28
    2128:	a9 a7       	std	Y+41, r26	; 0x29
    212a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212c:	6f a1       	ldd	r22, Y+39	; 0x27
    212e:	78 a5       	ldd	r23, Y+40	; 0x28
    2130:	89 a5       	ldd	r24, Y+41	; 0x29
    2132:	9a a5       	ldd	r25, Y+42	; 0x2a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a ef       	ldi	r20, 0xFA	; 250
    213a:	54 e4       	ldi	r21, 0x44	; 68
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	8b a3       	std	Y+35, r24	; 0x23
    2146:	9c a3       	std	Y+36, r25	; 0x24
    2148:	ad a3       	std	Y+37, r26	; 0x25
    214a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    214c:	6b a1       	ldd	r22, Y+35	; 0x23
    214e:	7c a1       	ldd	r23, Y+36	; 0x24
    2150:	8d a1       	ldd	r24, Y+37	; 0x25
    2152:	9e a1       	ldd	r25, Y+38	; 0x26
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	5f e3       	ldi	r21, 0x3F	; 63
    215c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2160:	88 23       	and	r24, r24
    2162:	2c f4       	brge	.+10     	; 0x216e <LCD_sendCommand+0x160>
		__ticks = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    216e:	6b a1       	ldd	r22, Y+35	; 0x23
    2170:	7c a1       	ldd	r23, Y+36	; 0x24
    2172:	8d a1       	ldd	r24, Y+37	; 0x25
    2174:	9e a1       	ldd	r25, Y+38	; 0x26
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	4f e7       	ldi	r20, 0x7F	; 127
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2182:	18 16       	cp	r1, r24
    2184:	4c f5       	brge	.+82     	; 0x21d8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2186:	6f a1       	ldd	r22, Y+39	; 0x27
    2188:	78 a5       	ldd	r23, Y+40	; 0x28
    218a:	89 a5       	ldd	r24, Y+41	; 0x29
    218c:	9a a5       	ldd	r25, Y+42	; 0x2a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <LCD_sendCommand+0x1c0>
    21b0:	88 ec       	ldi	r24, 0xC8	; 200
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	98 a3       	std	Y+32, r25	; 0x20
    21b6:	8f 8f       	std	Y+31, r24	; 0x1f
    21b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ba:	98 a1       	ldd	r25, Y+32	; 0x20
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_sendCommand+0x1ae>
    21c0:	98 a3       	std	Y+32, r25	; 0x20
    21c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	9a a3       	std	Y+34, r25	; 0x22
    21cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	9a a1       	ldd	r25, Y+34	; 0x22
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <LCD_sendCommand+0x1a2>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	6b a1       	ldd	r22, Y+35	; 0x23
    21da:	7c a1       	ldd	r23, Y+36	; 0x24
    21dc:	8d a1       	ldd	r24, Y+37	; 0x25
    21de:	9e a1       	ldd	r25, Y+38	; 0x26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9a a3       	std	Y+34, r25	; 0x22
    21ea:	89 a3       	std	Y+33, r24	; 0x21
    21ec:	89 a1       	ldd	r24, Y+33	; 0x21
    21ee:	9a a1       	ldd	r25, Y+34	; 0x22
    21f0:	9e 8f       	std	Y+30, r25	; 0x1e
    21f2:	8d 8f       	std	Y+29, r24	; 0x1d
    21f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_sendCommand+0x1ea>
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	69 ad       	ldd	r22, Y+57	; 0x39
    2204:	0e 94 57 0d 	call	0x1aae	; 0x1aae <GPIO_writePort>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e8       	ldi	r26, 0x80	; 128
    220e:	bf e3       	ldi	r27, 0x3F	; 63
    2210:	89 8f       	std	Y+25, r24	; 0x19
    2212:	9a 8f       	std	Y+26, r25	; 0x1a
    2214:	ab 8f       	std	Y+27, r26	; 0x1b
    2216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a ef       	ldi	r20, 0xFA	; 250
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8d 8b       	std	Y+21, r24	; 0x15
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	af 8b       	std	Y+23, r26	; 0x17
    2236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <LCD_sendCommand+0x2ac>
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	89 8b       	std	Y+17, r24	; 0x11
    22a4:	89 89       	ldd	r24, Y+17	; 0x11
    22a6:	9a 89       	ldd	r25, Y+18	; 0x12
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_sendCommand+0x29a>
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <LCD_sendCommand+0x28e>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9c 8b       	std	Y+20, r25	; 0x14
    22d6:	8b 8b       	std	Y+19, r24	; 0x13
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	98 8b       	std	Y+16, r25	; 0x10
    22de:	8f 87       	std	Y+15, r24	; 0x0f
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	98 89       	ldd	r25, Y+16	; 0x10
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x2d6>
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e8       	ldi	r26, 0x80	; 128
    22fc:	bf e3       	ldi	r27, 0x3F	; 63
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <LCD_sendCommand+0x33a>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <LCD_sendCommand+0x39a>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_sendCommand+0x388>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <LCD_sendCommand+0x37c>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_sendCommand+0x3c4>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23da:	e9 96       	adiw	r28, 0x39	; 57
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	e9 97       	sbiw	r28, 0x39	; 57
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e8       	ldi	r26, 0x80	; 128
    2412:	bf e3       	ldi	r27, 0x3F	; 63
    2414:	8d ab       	std	Y+53, r24	; 0x35
    2416:	9e ab       	std	Y+54, r25	; 0x36
    2418:	af ab       	std	Y+55, r26	; 0x37
    241a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241c:	6d a9       	ldd	r22, Y+53	; 0x35
    241e:	7e a9       	ldd	r23, Y+54	; 0x36
    2420:	8f a9       	ldd	r24, Y+55	; 0x37
    2422:	98 ad       	ldd	r25, Y+56	; 0x38
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a ef       	ldi	r20, 0xFA	; 250
    242a:	54 e4       	ldi	r21, 0x44	; 68
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	89 ab       	std	Y+49, r24	; 0x31
    2436:	9a ab       	std	Y+50, r25	; 0x32
    2438:	ab ab       	std	Y+51, r26	; 0x33
    243a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    243c:	69 a9       	ldd	r22, Y+49	; 0x31
    243e:	7a a9       	ldd	r23, Y+50	; 0x32
    2440:	8b a9       	ldd	r24, Y+51	; 0x33
    2442:	9c a9       	ldd	r25, Y+52	; 0x34
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	2c f4       	brge	.+10     	; 0x245e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	98 ab       	std	Y+48, r25	; 0x30
    245a:	8f a7       	std	Y+47, r24	; 0x2f
    245c:	3f c0       	rjmp	.+126    	; 0x24dc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	3f ef       	ldi	r19, 0xFF	; 255
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	57 e4       	ldi	r21, 0x47	; 71
    246e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	4c f5       	brge	.+82     	; 0x24c8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	6d a9       	ldd	r22, Y+53	; 0x35
    2478:	7e a9       	ldd	r23, Y+54	; 0x36
    247a:	8f a9       	ldd	r24, Y+55	; 0x37
    247c:	98 ad       	ldd	r25, Y+56	; 0x38
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	98 ab       	std	Y+48, r25	; 0x30
    249c:	8f a7       	std	Y+47, r24	; 0x2f
    249e:	0f c0       	rjmp	.+30     	; 0x24be <LCD_displayCharacter+0xd2>
    24a0:	88 ec       	ldi	r24, 0xC8	; 200
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9e a7       	std	Y+46, r25	; 0x2e
    24a6:	8d a7       	std	Y+45, r24	; 0x2d
    24a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_displayCharacter+0xc0>
    24b0:	9e a7       	std	Y+46, r25	; 0x2e
    24b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b6:	98 a9       	ldd	r25, Y+48	; 0x30
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	98 ab       	std	Y+48, r25	; 0x30
    24bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24be:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c0:	98 a9       	ldd	r25, Y+48	; 0x30
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	69 f7       	brne	.-38     	; 0x24a0 <LCD_displayCharacter+0xb4>
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ca:	7a a9       	ldd	r23, Y+50	; 0x32
    24cc:	8b a9       	ldd	r24, Y+51	; 0x33
    24ce:	9c a9       	ldd	r25, Y+52	; 0x34
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	98 ab       	std	Y+48, r25	; 0x30
    24da:	8f a7       	std	Y+47, r24	; 0x2f
    24dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24de:	98 a9       	ldd	r25, Y+48	; 0x30
    24e0:	9c a7       	std	Y+44, r25	; 0x2c
    24e2:	8b a7       	std	Y+43, r24	; 0x2b
    24e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_displayCharacter+0xfc>
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
    24ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a0 e8       	ldi	r26, 0x80	; 128
    2500:	bf e3       	ldi	r27, 0x3F	; 63
    2502:	8f a3       	std	Y+39, r24	; 0x27
    2504:	98 a7       	std	Y+40, r25	; 0x28
    2506:	a9 a7       	std	Y+41, r26	; 0x29
    2508:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	6f a1       	ldd	r22, Y+39	; 0x27
    250c:	78 a5       	ldd	r23, Y+40	; 0x28
    250e:	89 a5       	ldd	r24, Y+41	; 0x29
    2510:	9a a5       	ldd	r25, Y+42	; 0x2a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8b a3       	std	Y+35, r24	; 0x23
    2524:	9c a3       	std	Y+36, r25	; 0x24
    2526:	ad a3       	std	Y+37, r26	; 0x25
    2528:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    252a:	6b a1       	ldd	r22, Y+35	; 0x23
    252c:	7c a1       	ldd	r23, Y+36	; 0x24
    252e:	8d a1       	ldd	r24, Y+37	; 0x25
    2530:	9e a1       	ldd	r25, Y+38	; 0x26
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9a a3       	std	Y+34, r25	; 0x22
    2548:	89 a3       	std	Y+33, r24	; 0x21
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	6f a1       	ldd	r22, Y+39	; 0x27
    2566:	78 a5       	ldd	r23, Y+40	; 0x28
    2568:	89 a5       	ldd	r24, Y+41	; 0x29
    256a:	9a a5       	ldd	r25, Y+42	; 0x2a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <LCD_displayCharacter+0x1c0>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	98 a3       	std	Y+32, r25	; 0x20
    2594:	8f 8f       	std	Y+31, r24	; 0x1f
    2596:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2598:	98 a1       	ldd	r25, Y+32	; 0x20
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_displayCharacter+0x1ae>
    259e:	98 a3       	std	Y+32, r25	; 0x20
    25a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	89 a1       	ldd	r24, Y+33	; 0x21
    25a4:	9a a1       	ldd	r25, Y+34	; 0x22
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	89 a1       	ldd	r24, Y+33	; 0x21
    25ae:	9a a1       	ldd	r25, Y+34	; 0x22
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <LCD_displayCharacter+0x1a2>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6b a1       	ldd	r22, Y+35	; 0x23
    25b8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ba:	8d a1       	ldd	r24, Y+37	; 0x25
    25bc:	9e a1       	ldd	r25, Y+38	; 0x26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9a a3       	std	Y+34, r25	; 0x22
    25c8:	89 a3       	std	Y+33, r24	; 0x21
    25ca:	89 a1       	ldd	r24, Y+33	; 0x21
    25cc:	9a a1       	ldd	r25, Y+34	; 0x22
    25ce:	9e 8f       	std	Y+30, r25	; 0x1e
    25d0:	8d 8f       	std	Y+29, r24	; 0x1d
    25d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_displayCharacter+0x1ea>
    25da:	9e 8f       	std	Y+30, r25	; 0x1e
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	69 ad       	ldd	r22, Y+57	; 0x39
    25e2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <GPIO_writePort>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	89 8f       	std	Y+25, r24	; 0x19
    25f0:	9a 8f       	std	Y+26, r25	; 0x1a
    25f2:	ab 8f       	std	Y+27, r26	; 0x1b
    25f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8d 8b       	std	Y+21, r24	; 0x15
    2610:	9e 8b       	std	Y+22, r25	; 0x16
    2612:	af 8b       	std	Y+23, r26	; 0x17
    2614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_displayCharacter+0x2ac>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_displayCharacter+0x29a>
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_displayCharacter+0x28e>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_displayCharacter+0x2d6>
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 8d 0b 	call	0x171a	; 0x171a <GPIO_writePin>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e8       	ldi	r26, 0x80	; 128
    26da:	bf e3       	ldi	r27, 0x3F	; 63
    26dc:	8b 87       	std	Y+11, r24	; 0x0b
    26de:	9c 87       	std	Y+12, r25	; 0x0c
    26e0:	ad 87       	std	Y+13, r26	; 0x0d
    26e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8f 83       	std	Y+7, r24	; 0x07
    26fe:	98 87       	std	Y+8, r25	; 0x08
    2700:	a9 87       	std	Y+9, r26	; 0x09
    2702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <LCD_displayCharacter+0x39a>
    2768:	88 ec       	ldi	r24, 0xC8	; 200
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_displayCharacter+0x388>
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <LCD_displayCharacter+0x37c>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_displayCharacter+0x3c4>
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27b8:	e9 96       	adiw	r28, 0x39	; 57
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <LCD_displayString+0x6>
    27d0:	0f 92       	push	r0
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	9b 83       	std	Y+3, r25	; 0x03
    27d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27da:	19 82       	std	Y+1, r1	; 0x01
    27dc:	0e c0       	rjmp	.+28     	; 0x27fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	fc 01       	movw	r30, r24
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	80 81       	ld	r24, Z
    27f0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_displayCharacter>
		i++;
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	9b 81       	ldd	r25, Y+3	; 0x03
    2804:	fc 01       	movw	r30, r24
    2806:	e2 0f       	add	r30, r18
    2808:	f3 1f       	adc	r31, r19
    280a:	80 81       	ld	r24, Z
    280c:	88 23       	and	r24, r24
    280e:	39 f7       	brne	.-50     	; 0x27de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <LCD_moveCursor+0x6>
    2822:	00 d0       	rcall	.+0      	; 0x2824 <LCD_moveCursor+0x8>
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	8a 83       	std	Y+2, r24	; 0x02
    282c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	3d 83       	std	Y+5, r19	; 0x05
    2836:	2c 83       	std	Y+4, r18	; 0x04
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	9d 81       	ldd	r25, Y+5	; 0x05
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	91 05       	cpc	r25, r1
    2840:	c1 f0       	breq	.+48     	; 0x2872 <LCD_moveCursor+0x56>
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	31 05       	cpc	r19, r1
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_moveCursor+0x3a>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	61 f0       	breq	.+24     	; 0x286c <LCD_moveCursor+0x50>
    2854:	19 c0       	rjmp	.+50     	; 0x2888 <LCD_moveCursor+0x6c>
    2856:	2c 81       	ldd	r18, Y+4	; 0x04
    2858:	3d 81       	ldd	r19, Y+5	; 0x05
    285a:	22 30       	cpi	r18, 0x02	; 2
    285c:	31 05       	cpc	r19, r1
    285e:	69 f0       	breq	.+26     	; 0x287a <LCD_moveCursor+0x5e>
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	9d 81       	ldd	r25, Y+5	; 0x05
    2864:	83 30       	cpi	r24, 0x03	; 3
    2866:	91 05       	cpc	r25, r1
    2868:	61 f0       	breq	.+24     	; 0x2882 <LCD_moveCursor+0x66>
    286a:	0e c0       	rjmp	.+28     	; 0x2888 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	89 83       	std	Y+1, r24	; 0x01
    2870:	0b c0       	rjmp	.+22     	; 0x2888 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	80 5c       	subi	r24, 0xC0	; 192
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	80 5f       	subi	r24, 0xF0	; 240
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	80 5b       	subi	r24, 0xB0	; 176
    2886:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	80 68       	ori	r24, 0x80	; 128
    288c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_sendCommand>
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <LCD_displayStringRowColumn+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <LCD_displayStringRowColumn+0x8>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	6a 83       	std	Y+2, r22	; 0x02
    28b0:	5c 83       	std	Y+4, r21	; 0x04
    28b2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	6a 81       	ldd	r22, Y+2	; 0x02
    28b8:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_displayString>
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	62 97       	sbiw	r28, 0x12	; 18
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	9a 8b       	std	Y+18, r25	; 0x12
    28e8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28ea:	89 89       	ldd	r24, Y+17	; 0x11
    28ec:	9a 89       	ldd	r25, Y+18	; 0x12
    28ee:	9e 01       	movw	r18, r28
    28f0:	2f 5f       	subi	r18, 0xFF	; 255
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
    28f4:	b9 01       	movw	r22, r18
    28f6:	4a e0       	ldi	r20, 0x0A	; 10
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	0e 94 19 19 	call	0x3232	; 0x3232 <itoa>
   LCD_displayString(buff); /* Display the string */
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_displayString>
}
    2906:	62 96       	adiw	r28, 0x12	; 18
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_sendCommand>
}
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <PWM_Timer0_Start>:
 *      Author: hassan
 */
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	0f 92       	push	r0
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	89 83       	std	Y+1, r24	; 0x01
    // Set OC0 (PD6) as output pin for PWM signal
    DDRB |= (1 << PB3);  // PB3 is OC0 on some ATmega microcontrollers (e.g., ATmega16/32)
    2938:	a7 e3       	ldi	r26, 0x37	; 55
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e7 e3       	ldi	r30, 0x37	; 55
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	88 60       	ori	r24, 0x08	; 8
    2944:	8c 93       	st	X, r24

    // Set Fast PWM mode (WGM01 = 1, WGM00 = 1)
    TCCR0 |= (1 << WGM00) | (1 << WGM01);
    2946:	a3 e5       	ldi	r26, 0x53	; 83
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e3 e5       	ldi	r30, 0x53	; 83
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	88 64       	ori	r24, 0x48	; 72
    2952:	8c 93       	st	X, r24

    // Set Non-inverting mode (COM01 = 1, COM00 = 0)
    TCCR0 |= (1 << COM01);
    2954:	a3 e5       	ldi	r26, 0x53	; 83
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e3 e5       	ldi	r30, 0x53	; 83
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	80 62       	ori	r24, 0x20	; 32
    2960:	8c 93       	st	X, r24
    TCCR0 &= ~(1 << COM00);
    2962:	a3 e5       	ldi	r26, 0x53	; 83
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e3 e5       	ldi	r30, 0x53	; 83
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8f 7e       	andi	r24, 0xEF	; 239
    296e:	8c 93       	st	X, r24

    // Set the prescaler to F_CPU/64 (CS01 = 1, CS00 = 1, CS02 = 0)
    TCCR0 |= (1 << CS01) | (1 << CS00);
    2970:	a3 e5       	ldi	r26, 0x53	; 83
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e3 e5       	ldi	r30, 0x53	; 83
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	83 60       	ori	r24, 0x03	; 3
    297c:	8c 93       	st	X, r24
    TCCR0 &= ~(1 << CS02);
    297e:	a3 e5       	ldi	r26, 0x53	; 83
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e3 e5       	ldi	r30, 0x53	; 83
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8b 7f       	andi	r24, 0xFB	; 251
    298a:	8c 93       	st	X, r24

    // Set the duty cycle (OCR0 register)
    OCR0 = (duty_cycle * 255) / 100;
    298c:	ec e5       	ldi	r30, 0x5C	; 92
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	48 2f       	mov	r20, r24
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	ca 01       	movw	r24, r20
    2998:	9c 01       	movw	r18, r24
    299a:	22 0f       	add	r18, r18
    299c:	33 1f       	adc	r19, r19
    299e:	c9 01       	movw	r24, r18
    29a0:	96 95       	lsr	r25
    29a2:	98 2f       	mov	r25, r24
    29a4:	88 27       	eor	r24, r24
    29a6:	97 95       	ror	r25
    29a8:	87 95       	ror	r24
    29aa:	82 1b       	sub	r24, r18
    29ac:	93 0b       	sbc	r25, r19
    29ae:	84 0f       	add	r24, r20
    29b0:	95 1f       	adc	r25, r21
    29b2:	24 e6       	ldi	r18, 0x64	; 100
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	b9 01       	movw	r22, r18
    29b8:	0e 94 99 18 	call	0x3132	; 0x3132 <__divmodhi4>
    29bc:	cb 01       	movw	r24, r22
    29be:	80 83       	st	Z, r24
}
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    29c8:	1f 92       	push	r1
    29ca:	0f 92       	push	r0
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	0f 92       	push	r0
    29d0:	11 24       	eor	r1, r1
    29d2:	2f 93       	push	r18
    29d4:	3f 93       	push	r19
    29d6:	4f 93       	push	r20
    29d8:	5f 93       	push	r21
    29da:	6f 93       	push	r22
    29dc:	7f 93       	push	r23
    29de:	8f 93       	push	r24
    29e0:	9f 93       	push	r25
    29e2:	af 93       	push	r26
    29e4:	bf 93       	push	r27
    29e6:	ef 93       	push	r30
    29e8:	ff 93       	push	r31
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER0 != NULL_PTR)
    29f2:	80 91 3d 01 	lds	r24, 0x013D
    29f6:	90 91 3e 01 	lds	r25, 0x013E
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	29 f0       	breq	.+10     	; 0x2a08 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29fe:	e0 91 3d 01 	lds	r30, 0x013D
    2a02:	f0 91 3e 01 	lds	r31, 0x013E
    2a06:	09 95       	icall
	}
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	ff 91       	pop	r31
    2a0e:	ef 91       	pop	r30
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	7f 91       	pop	r23
    2a1a:	6f 91       	pop	r22
    2a1c:	5f 91       	pop	r21
    2a1e:	4f 91       	pop	r20
    2a20:	3f 91       	pop	r19
    2a22:	2f 91       	pop	r18
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	0f 90       	pop	r0
    2a2a:	1f 90       	pop	r1
    2a2c:	18 95       	reti

00002a2e <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    2a2e:	1f 92       	push	r1
    2a30:	0f 92       	push	r0
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	0f 92       	push	r0
    2a36:	11 24       	eor	r1, r1
    2a38:	2f 93       	push	r18
    2a3a:	3f 93       	push	r19
    2a3c:	4f 93       	push	r20
    2a3e:	5f 93       	push	r21
    2a40:	6f 93       	push	r22
    2a42:	7f 93       	push	r23
    2a44:	8f 93       	push	r24
    2a46:	9f 93       	push	r25
    2a48:	af 93       	push	r26
    2a4a:	bf 93       	push	r27
    2a4c:	ef 93       	push	r30
    2a4e:	ff 93       	push	r31
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER0 != NULL_PTR)
    2a58:	80 91 3d 01 	lds	r24, 0x013D
    2a5c:	90 91 3e 01 	lds	r25, 0x013E
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	29 f0       	breq	.+10     	; 0x2a6e <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a64:	e0 91 3d 01 	lds	r30, 0x013D
    2a68:	f0 91 3e 01 	lds	r31, 0x013E
    2a6c:	09 95       	icall
	}
}
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	ff 91       	pop	r31
    2a74:	ef 91       	pop	r30
    2a76:	bf 91       	pop	r27
    2a78:	af 91       	pop	r26
    2a7a:	9f 91       	pop	r25
    2a7c:	8f 91       	pop	r24
    2a7e:	7f 91       	pop	r23
    2a80:	6f 91       	pop	r22
    2a82:	5f 91       	pop	r21
    2a84:	4f 91       	pop	r20
    2a86:	3f 91       	pop	r19
    2a88:	2f 91       	pop	r18
    2a8a:	0f 90       	pop	r0
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	0f 90       	pop	r0
    2a90:	1f 90       	pop	r1
    2a92:	18 95       	reti

00002a94 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    2a94:	1f 92       	push	r1
    2a96:	0f 92       	push	r0
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	0f 92       	push	r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	2f 93       	push	r18
    2aa0:	3f 93       	push	r19
    2aa2:	4f 93       	push	r20
    2aa4:	5f 93       	push	r21
    2aa6:	6f 93       	push	r22
    2aa8:	7f 93       	push	r23
    2aaa:	8f 93       	push	r24
    2aac:	9f 93       	push	r25
    2aae:	af 93       	push	r26
    2ab0:	bf 93       	push	r27
    2ab2:	ef 93       	push	r30
    2ab4:	ff 93       	push	r31
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER1 != NULL_PTR)
    2abe:	80 91 3f 01 	lds	r24, 0x013F
    2ac2:	90 91 40 01 	lds	r25, 0x0140
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	29 f0       	breq	.+10     	; 0x2ad4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2aca:	e0 91 3f 01 	lds	r30, 0x013F
    2ace:	f0 91 40 01 	lds	r31, 0x0140
    2ad2:	09 95       	icall
	}
}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	7f 91       	pop	r23
    2ae6:	6f 91       	pop	r22
    2ae8:	5f 91       	pop	r21
    2aea:	4f 91       	pop	r20
    2aec:	3f 91       	pop	r19
    2aee:	2f 91       	pop	r18
    2af0:	0f 90       	pop	r0
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	0f 90       	pop	r0
    2af6:	1f 90       	pop	r1
    2af8:	18 95       	reti

00002afa <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    2afa:	1f 92       	push	r1
    2afc:	0f 92       	push	r0
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	0f 92       	push	r0
    2b02:	11 24       	eor	r1, r1
    2b04:	2f 93       	push	r18
    2b06:	3f 93       	push	r19
    2b08:	4f 93       	push	r20
    2b0a:	5f 93       	push	r21
    2b0c:	6f 93       	push	r22
    2b0e:	7f 93       	push	r23
    2b10:	8f 93       	push	r24
    2b12:	9f 93       	push	r25
    2b14:	af 93       	push	r26
    2b16:	bf 93       	push	r27
    2b18:	ef 93       	push	r30
    2b1a:	ff 93       	push	r31
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER1 != NULL_PTR)
    2b24:	80 91 3f 01 	lds	r24, 0x013F
    2b28:	90 91 40 01 	lds	r25, 0x0140
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	29 f0       	breq	.+10     	; 0x2b3a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b30:	e0 91 3f 01 	lds	r30, 0x013F
    2b34:	f0 91 40 01 	lds	r31, 0x0140
    2b38:	09 95       	icall
	}
}
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	bf 91       	pop	r27
    2b44:	af 91       	pop	r26
    2b46:	9f 91       	pop	r25
    2b48:	8f 91       	pop	r24
    2b4a:	7f 91       	pop	r23
    2b4c:	6f 91       	pop	r22
    2b4e:	5f 91       	pop	r21
    2b50:	4f 91       	pop	r20
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    2b60:	1f 92       	push	r1
    2b62:	0f 92       	push	r0
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	0f 92       	push	r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	2f 93       	push	r18
    2b6c:	3f 93       	push	r19
    2b6e:	4f 93       	push	r20
    2b70:	5f 93       	push	r21
    2b72:	6f 93       	push	r22
    2b74:	7f 93       	push	r23
    2b76:	8f 93       	push	r24
    2b78:	9f 93       	push	r25
    2b7a:	af 93       	push	r26
    2b7c:	bf 93       	push	r27
    2b7e:	ef 93       	push	r30
    2b80:	ff 93       	push	r31
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER2 != NULL_PTR)
    2b8a:	80 91 41 01 	lds	r24, 0x0141
    2b8e:	90 91 42 01 	lds	r25, 0x0142
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	29 f0       	breq	.+10     	; 0x2ba0 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b96:	e0 91 41 01 	lds	r30, 0x0141
    2b9a:	f0 91 42 01 	lds	r31, 0x0142
    2b9e:	09 95       	icall
	}
}
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	ff 91       	pop	r31
    2ba6:	ef 91       	pop	r30
    2ba8:	bf 91       	pop	r27
    2baa:	af 91       	pop	r26
    2bac:	9f 91       	pop	r25
    2bae:	8f 91       	pop	r24
    2bb0:	7f 91       	pop	r23
    2bb2:	6f 91       	pop	r22
    2bb4:	5f 91       	pop	r21
    2bb6:	4f 91       	pop	r20
    2bb8:	3f 91       	pop	r19
    2bba:	2f 91       	pop	r18
    2bbc:	0f 90       	pop	r0
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	0f 90       	pop	r0
    2bc2:	1f 90       	pop	r1
    2bc4:	18 95       	reti

00002bc6 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    2bc6:	1f 92       	push	r1
    2bc8:	0f 92       	push	r0
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	0f 92       	push	r0
    2bce:	11 24       	eor	r1, r1
    2bd0:	2f 93       	push	r18
    2bd2:	3f 93       	push	r19
    2bd4:	4f 93       	push	r20
    2bd6:	5f 93       	push	r21
    2bd8:	6f 93       	push	r22
    2bda:	7f 93       	push	r23
    2bdc:	8f 93       	push	r24
    2bde:	9f 93       	push	r25
    2be0:	af 93       	push	r26
    2be2:	bf 93       	push	r27
    2be4:	ef 93       	push	r30
    2be6:	ff 93       	push	r31
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER2 != NULL_PTR)
    2bf0:	80 91 41 01 	lds	r24, 0x0141
    2bf4:	90 91 42 01 	lds	r25, 0x0142
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	29 f0       	breq	.+10     	; 0x2c06 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bfc:	e0 91 41 01 	lds	r30, 0x0141
    2c00:	f0 91 42 01 	lds	r31, 0x0142
    2c04:	09 95       	icall
	}
}
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	bf 91       	pop	r27
    2c10:	af 91       	pop	r26
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	7f 91       	pop	r23
    2c18:	6f 91       	pop	r22
    2c1a:	5f 91       	pop	r21
    2c1c:	4f 91       	pop	r20
    2c1e:	3f 91       	pop	r19
    2c20:	2f 91       	pop	r18
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <Timer_init+0x6>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	9a 83       	std	Y+2, r25	; 0x02
    2c38:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_ID==TIMER0_ID)
    2c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3e:	84 81       	ldd	r24, Z+4	; 0x04
    2c40:	88 23       	and	r24, r24
    2c42:	e9 f5       	brne	.+122    	; 0x2cbe <Timer_init+0x92>
	{
		TCNT0 = Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    2c44:	a2 e5       	ldi	r26, 0x52	; 82
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    2c52:	ac e5       	ldi	r26, 0x5C	; 92
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e9 81       	ldd	r30, Y+1	; 0x01
    2c58:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	8c 93       	st	X, r24
		 * 1. Non_pwm mode FOC0=1
		 * 2. WGM00 = 0 , WGM01=1 for ctc and 0 for normal
		 * 3. OC0 DISABLED
		 * 4. clock = Configurable
		 */
		TCCR0 |= (1<<FOC0)|(Config_Ptr->timer_mode<<WGM01)|(Config_Ptr->timer_clock<<CS00);
    2c60:	a3 e5       	ldi	r26, 0x53	; 83
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e3 e5       	ldi	r30, 0x53	; 83
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c70:	86 81       	ldd	r24, Z+6	; 0x06
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	98 2f       	mov	r25, r24
    2c84:	90 68       	ori	r25, 0x80	; 128
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	85 81       	ldd	r24, Z+5	; 0x05
    2c8c:	89 2b       	or	r24, r25
    2c8e:	82 2b       	or	r24, r18
    2c90:	8c 93       	st	X, r24
		/*enable interrupt*/
		TIMSK |=(1<<(Config_Ptr->timer_mode));
    2c92:	a9 e5       	ldi	r26, 0x59	; 89
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e9 e5       	ldi	r30, 0x59	; 89
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	48 2f       	mov	r20, r24
    2c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca2:	86 81       	ldd	r24, Z+6	; 0x06
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	02 2e       	mov	r0, r18
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <Timer_init+0x88>
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	0a 94       	dec	r0
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <Timer_init+0x84>
    2cb8:	84 2b       	or	r24, r20
    2cba:	8c 93       	st	X, r24
    2cbc:	97 c0       	rjmp	.+302    	; 0x2dec <Timer_init+0x1c0>
	}
	else if(Config_Ptr->timer_ID==TIMER1_ID)
    2cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc2:	84 81       	ldd	r24, Z+4	; 0x04
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <Timer_init+0x9e>
    2cc8:	4c c0       	rjmp	.+152    	; 0x2d62 <Timer_init+0x136>
	{
		TCNT1 = Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    2cca:	ac e4       	ldi	r26, 0x4C	; 76
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	11 96       	adiw	r26, 0x01	; 1
    2cd8:	9c 93       	st	X, r25
    2cda:	8e 93       	st	-X, r24
		OCR1A  =Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    2cdc:	aa e4       	ldi	r26, 0x4A	; 74
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	9c 93       	st	X, r25
    2cec:	8e 93       	st	-X, r24
		 * 1. Non_pwm mode FOC1B=1
		 * 2. WGM10,WGM11,WGM13=0 & WGM12=1 for ctc and 0 for normal
		 * 3. OC DISABLED
		 * 4. clock = Configurable
		 */
		TCCR1A |= (1<<FOC1A) ;
    2cee:	af e4       	ldi	r26, 0x4F	; 79
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ef e4       	ldi	r30, 0x4F	; 79
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 60       	ori	r24, 0x08	; 8
    2cfa:	8c 93       	st	X, r24
		TCCR1B |= (Config_Ptr->timer_mode<<WGM12)|(Config_Ptr->timer_clock<<CS10);
    2cfc:	ae e4       	ldi	r26, 0x4E	; 78
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ee e4       	ldi	r30, 0x4E	; 78
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	28 2f       	mov	r18, r24
    2d08:	e9 81       	ldd	r30, Y+1	; 0x01
    2d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0c:	86 81       	ldd	r24, Z+6	; 0x06
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	98 2f       	mov	r25, r24
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	85 81       	ldd	r24, Z+5	; 0x05
    2d26:	89 2b       	or	r24, r25
    2d28:	82 2b       	or	r24, r18
    2d2a:	8c 93       	st	X, r24
		/*enable interrupt*/
		if (Config_Ptr->timer_mode == NORMAL_MODE)
    2d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d30:	86 81       	ldd	r24, Z+6	; 0x06
    2d32:	88 23       	and	r24, r24
    2d34:	41 f4       	brne	.+16     	; 0x2d46 <Timer_init+0x11a>
		{
			TIMSK |= (1 << TOIE1);
    2d36:	a9 e5       	ldi	r26, 0x59	; 89
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e9 e5       	ldi	r30, 0x59	; 89
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	84 60       	ori	r24, 0x04	; 4
    2d42:	8c 93       	st	X, r24
    2d44:	53 c0       	rjmp	.+166    	; 0x2dec <Timer_init+0x1c0>
		}
		else if (Config_Ptr->timer_mode == CTC_MODE)
    2d46:	e9 81       	ldd	r30, Y+1	; 0x01
    2d48:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4a:	86 81       	ldd	r24, Z+6	; 0x06
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <Timer_init+0x126>
    2d50:	4d c0       	rjmp	.+154    	; 0x2dec <Timer_init+0x1c0>
		{
			TIMSK |= (1 << OCIE1A);
    2d52:	a9 e5       	ldi	r26, 0x59	; 89
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e9 e5       	ldi	r30, 0x59	; 89
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 61       	ori	r24, 0x10	; 16
    2d5e:	8c 93       	st	X, r24
    2d60:	45 c0       	rjmp	.+138    	; 0x2dec <Timer_init+0x1c0>
		}

	}
	else if(Config_Ptr->timer_ID==TIMER2_ID)
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	84 81       	ldd	r24, Z+4	; 0x04
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <Timer_init+0x142>
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <Timer_init+0x1c0>
	{
		TCNT2= Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    2d6e:	a4 e4       	ldi	r26, 0x44	; 68
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e9 81       	ldd	r30, Y+1	; 0x01
    2d74:	fa 81       	ldd	r31, Y+2	; 0x02
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	8c 93       	st	X, r24
		OCR2  =Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    2d7c:	a3 e4       	ldi	r26, 0x43	; 67
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e9 81       	ldd	r30, Y+1	; 0x01
    2d82:	fa 81       	ldd	r31, Y+2	; 0x02
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	8c 93       	st	X, r24
		 * 1. Non_pwm mode FOC2=1
		 * 2. WGM20 = 0 , WGM21=1 for ctc and 0 for normal
		 * 3. OC2 DISABLED
		 * 4. clock = Configurable
		 */
		TCCR2 |= (1<<FOC2)|(Config_Ptr->timer_mode<<WGM21)|(Config_Ptr->timer_clock<<CS20);
    2d8a:	a5 e4       	ldi	r26, 0x45	; 69
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e5 e4       	ldi	r30, 0x45	; 69
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	28 2f       	mov	r18, r24
    2d96:	e9 81       	ldd	r30, Y+1	; 0x01
    2d98:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9a:	86 81       	ldd	r24, Z+6	; 0x06
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	98 2f       	mov	r25, r24
    2dae:	90 68       	ori	r25, 0x80	; 128
    2db0:	e9 81       	ldd	r30, Y+1	; 0x01
    2db2:	fa 81       	ldd	r31, Y+2	; 0x02
    2db4:	85 81       	ldd	r24, Z+5	; 0x05
    2db6:	89 2b       	or	r24, r25
    2db8:	82 2b       	or	r24, r18
    2dba:	8c 93       	st	X, r24
		/*enable interrupt*/
		TIMSK |=(1<<(TOIE2+(Config_Ptr->timer_mode)));
    2dbc:	a9 e5       	ldi	r26, 0x59	; 89
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e9 e5       	ldi	r30, 0x59	; 89
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dca:	fa 81       	ldd	r31, Y+2	; 0x02
    2dcc:	86 81       	ldd	r24, Z+6	; 0x06
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9c 01       	movw	r18, r24
    2dd4:	2a 5f       	subi	r18, 0xFA	; 250
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	02 2e       	mov	r0, r18
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <Timer_init+0x1b8>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	0a 94       	dec	r0
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <Timer_init+0x1b4>
    2de8:	84 2b       	or	r24, r20
    2dea:	8c 93       	st	X, r24
	}
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type)
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	0f 92       	push	r0
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0_ID)
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	88 23       	and	r24, r24
    2e06:	c1 f4       	brne	.+48     	; 0x2e38 <Timer_deInit+0x42>
	{
		// Stop the timer by setting the prescaler to 0
		TCCR0 = 0;
    2e08:	e3 e5       	ldi	r30, 0x53	; 83
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	10 82       	st	Z, r1
		// Disable Timer0 interrupts
		TIMSK &= ~(1 << TOIE0);
    2e0e:	a9 e5       	ldi	r26, 0x59	; 89
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e9 e5       	ldi	r30, 0x59	; 89
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	8e 7f       	andi	r24, 0xFE	; 254
    2e1a:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE0);
    2e1c:	a9 e5       	ldi	r26, 0x59	; 89
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e9 e5       	ldi	r30, 0x59	; 89
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8d 7f       	andi	r24, 0xFD	; 253
    2e28:	8c 93       	st	X, r24
		//clear the counter register
		TCNT0 = 0 ;
    2e2a:	e2 e5       	ldi	r30, 0x52	; 82
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	10 82       	st	Z, r1
		OCR0  = 0 ;
    2e30:	ec e5       	ldi	r30, 0x5C	; 92
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	10 82       	st	Z, r1
    2e36:	3a c0       	rjmp	.+116    	; 0x2eac <Timer_deInit+0xb6>
	}
	else if(timer_type==TIMER1_ID)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	e9 f4       	brne	.+58     	; 0x2e78 <Timer_deInit+0x82>
	{
		// Stop the timer
		TCCR1A = 0;
    2e3e:	ef e4       	ldi	r30, 0x4F	; 79
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	10 82       	st	Z, r1
		TCCR1B = 0;
    2e44:	ee e4       	ldi	r30, 0x4E	; 78
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	10 82       	st	Z, r1
		// Disable Timer1 interrupts
		TIMSK &= ~(1 << TOIE1);
    2e4a:	a9 e5       	ldi	r26, 0x59	; 89
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e9 e5       	ldi	r30, 0x59	; 89
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8b 7f       	andi	r24, 0xFB	; 251
    2e56:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE1B);
    2e58:	a9 e5       	ldi	r26, 0x59	; 89
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e9 e5       	ldi	r30, 0x59	; 89
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	87 7f       	andi	r24, 0xF7	; 247
    2e64:	8c 93       	st	X, r24
		// Clear registers
		TCNT1 = 0;
    2e66:	ec e4       	ldi	r30, 0x4C	; 76
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	11 82       	std	Z+1, r1	; 0x01
    2e6c:	10 82       	st	Z, r1
		OCR1A = 0;
    2e6e:	ea e4       	ldi	r30, 0x4A	; 74
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	11 82       	std	Z+1, r1	; 0x01
    2e74:	10 82       	st	Z, r1
    2e76:	1a c0       	rjmp	.+52     	; 0x2eac <Timer_deInit+0xb6>
	}
	else if(timer_type==TIMER2_ID)
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	82 30       	cpi	r24, 0x02	; 2
    2e7c:	b9 f4       	brne	.+46     	; 0x2eac <Timer_deInit+0xb6>
	{
		// Stop the timer
		TCCR2 = 0;
    2e7e:	e5 e4       	ldi	r30, 0x45	; 69
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	10 82       	st	Z, r1
		// Disable Timer2 interrupts
		TIMSK &= ~(1 << TOIE2);
    2e84:	a9 e5       	ldi	r26, 0x59	; 89
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e9 e5       	ldi	r30, 0x59	; 89
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8f 7b       	andi	r24, 0xBF	; 191
    2e90:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE2);
    2e92:	a9 e5       	ldi	r26, 0x59	; 89
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e9 e5       	ldi	r30, 0x59	; 89
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 77       	andi	r24, 0x7F	; 127
    2e9e:	8c 93       	st	X, r24
		// Clear registers
		TCNT2 = 0;
    2ea0:	e4 e4       	ldi	r30, 0x44	; 68
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	10 82       	st	Z, r1
		OCR2 = 0;
    2ea6:	e3 e4       	ldi	r30, 0x43	; 67
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	10 82       	st	Z, r1
	}
}
    2eac:	0f 90       	pop	r0
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <Timer_setCallBack+0x6>
    2eba:	0f 92       	push	r0
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID==TIMER0_ID)
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	88 23       	and	r24, r24
    2eca:	39 f4       	brne	.+14     	; 0x2eda <Timer_setCallBack+0x26>
	{
		g_callBackPtr_TIMER0 = a_ptr;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	90 93 3e 01 	sts	0x013E, r25
    2ed4:	80 93 3d 01 	sts	0x013D, r24
    2ed8:	13 c0       	rjmp	.+38     	; 0x2f00 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER1_ID)
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	81 30       	cpi	r24, 0x01	; 1
    2ede:	39 f4       	brne	.+14     	; 0x2eee <Timer_setCallBack+0x3a>
	{
		g_callBackPtr_TIMER1 = a_ptr;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	90 93 40 01 	sts	0x0140, r25
    2ee8:	80 93 3f 01 	sts	0x013F, r24
    2eec:	09 c0       	rjmp	.+18     	; 0x2f00 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER2_ID)
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	82 30       	cpi	r24, 0x02	; 2
    2ef2:	31 f4       	brne	.+12     	; 0x2f00 <Timer_setCallBack+0x4c>
	{
		g_callBackPtr_TIMER2 = a_ptr;
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	90 93 42 01 	sts	0x0142, r25
    2efc:	80 93 41 01 	sts	0x0141, r24
	}
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <UART_init+0x6>
    2f12:	00 d0       	rcall	.+0      	; 0x2f14 <UART_init+0x8>
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	9c 83       	std	Y+4, r25	; 0x04
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f1c:	1a 82       	std	Y+2, r1	; 0x02
    2f1e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f20:	eb e2       	ldi	r30, 0x2B	; 43
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f28:	ea e2       	ldi	r30, 0x2A	; 42
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	88 e1       	ldi	r24, 0x18	; 24
    2f2e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2f30:	e0 e4       	ldi	r30, 0x40	; 64
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 e8       	ldi	r24, 0x80	; 128
    2f36:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    2f38:	a0 e4       	ldi	r26, 0x40	; 64
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e0 e4       	ldi	r30, 0x40	; 64
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	28 2f       	mov	r18, r24
    2f44:	29 7f       	andi	r18, 0xF9	; 249
    2f46:	eb 81       	ldd	r30, Y+3	; 0x03
    2f48:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4a:	80 81       	ld	r24, Z
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	82 2b       	or	r24, r18
    2f56:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    2f58:	a0 e4       	ldi	r26, 0x40	; 64
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e0 e4       	ldi	r30, 0x40	; 64
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	28 2f       	mov	r18, r24
    2f64:	2f 7c       	andi	r18, 0xCF	; 207
    2f66:	eb 81       	ldd	r30, Y+3	; 0x03
    2f68:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6a:	81 81       	ldd	r24, Z+1	; 0x01
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	82 95       	swap	r24
    2f72:	92 95       	swap	r25
    2f74:	90 7f       	andi	r25, 0xF0	; 240
    2f76:	98 27       	eor	r25, r24
    2f78:	80 7f       	andi	r24, 0xF0	; 240
    2f7a:	98 27       	eor	r25, r24
    2f7c:	82 2b       	or	r24, r18
    2f7e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    2f80:	a0 e4       	ldi	r26, 0x40	; 64
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e0 e4       	ldi	r30, 0x40	; 64
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	27 7f       	andi	r18, 0xF7	; 247
    2f8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f90:	fc 81       	ldd	r31, Y+4	; 0x04
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	88 2f       	mov	r24, r24
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	82 2b       	or	r24, r18
    2fa6:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2fa8:	eb 81       	ldd	r30, Y+3	; 0x03
    2faa:	fc 81       	ldd	r31, Y+4	; 0x04
    2fac:	83 81       	ldd	r24, Z+3	; 0x03
    2fae:	94 81       	ldd	r25, Z+4	; 0x04
    2fb0:	a5 81       	ldd	r26, Z+5	; 0x05
    2fb2:	b6 81       	ldd	r27, Z+6	; 0x06
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	aa 1f       	adc	r26, r26
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	aa 1f       	adc	r26, r26
    2fc2:	bb 1f       	adc	r27, r27
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	aa 1f       	adc	r26, r26
    2fca:	bb 1f       	adc	r27, r27
    2fcc:	9c 01       	movw	r18, r24
    2fce:	ad 01       	movw	r20, r26
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	92 e1       	ldi	r25, 0x12	; 18
    2fd4:	aa e7       	ldi	r26, 0x7A	; 122
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    2fe0:	da 01       	movw	r26, r20
    2fe2:	c9 01       	movw	r24, r18
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2fea:	e0 e4       	ldi	r30, 0x40	; 64
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	89 2f       	mov	r24, r25
    2ff4:	99 27       	eor	r25, r25
    2ff6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ff8:	e9 e2       	ldi	r30, 0x29	; 41
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	80 83       	st	Z, r24
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	0f 92       	push	r0
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    301a:	eb e2       	ldi	r30, 0x2B	; 43
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	80 72       	andi	r24, 0x20	; 32
    3026:	90 70       	andi	r25, 0x00	; 0
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	b9 f3       	breq	.-18     	; 0x301a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    302c:	ec e2       	ldi	r30, 0x2C	; 44
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3044:	eb e2       	ldi	r30, 0x2B	; 43
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	88 23       	and	r24, r24
    304c:	dc f7       	brge	.-10     	; 0x3044 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    304e:	ec e2       	ldi	r30, 0x2C	; 44
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
}
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <UART_sendString+0x6>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	9b 83       	std	Y+3, r25	; 0x03
    3068:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    306a:	19 82       	std	Y+1, r1	; 0x01
    306c:	0e c0       	rjmp	.+28     	; 0x308a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	9b 81       	ldd	r25, Y+3	; 0x03
    3078:	fc 01       	movw	r30, r24
    307a:	e2 0f       	add	r30, r18
    307c:	f3 1f       	adc	r31, r19
    307e:	80 81       	ld	r24, Z
    3080:	0e 94 07 18 	call	0x300e	; 0x300e <UART_sendByte>
		i++;
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	8f 5f       	subi	r24, 0xFF	; 255
    3088:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	fc 01       	movw	r30, r24
    3096:	e2 0f       	add	r30, r18
    3098:	f3 1f       	adc	r31, r19
    309a:	80 81       	ld	r24, Z
    309c:	88 23       	and	r24, r24
    309e:	39 f7       	brne	.-50     	; 0x306e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <UART_receiveString+0xa>
    30b6:	0f 92       	push	r0
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	9b 83       	std	Y+3, r25	; 0x03
    30be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30c0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	9b 81       	ldd	r25, Y+3	; 0x03
    30cc:	8c 01       	movw	r16, r24
    30ce:	02 0f       	add	r16, r18
    30d0:	13 1f       	adc	r17, r19
    30d2:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    30d6:	f8 01       	movw	r30, r16
    30d8:	80 83       	st	Z, r24
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	8f 5f       	subi	r24, 0xFF	; 255
    30e0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	9b 81       	ldd	r25, Y+3	; 0x03
    30ec:	8c 01       	movw	r16, r24
    30ee:	02 0f       	add	r16, r18
    30f0:	13 1f       	adc	r17, r19
    30f2:	0e 94 1e 18 	call	0x303c	; 0x303c <UART_recieveByte>
    30f6:	f8 01       	movw	r30, r16
    30f8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	9b 81       	ldd	r25, Y+3	; 0x03
    3104:	fc 01       	movw	r30, r24
    3106:	e2 0f       	add	r30, r18
    3108:	f3 1f       	adc	r31, r19
    310a:	80 81       	ld	r24, Z
    310c:	83 32       	cpi	r24, 0x23	; 35
    310e:	31 f7       	brne	.-52     	; 0x30dc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	9b 81       	ldd	r25, Y+3	; 0x03
    311a:	fc 01       	movw	r30, r24
    311c:	e2 0f       	add	r30, r18
    311e:	f3 1f       	adc	r31, r19
    3120:	10 82       	st	Z, r1
}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <__divmodhi4>:
    3132:	97 fb       	bst	r25, 7
    3134:	09 2e       	mov	r0, r25
    3136:	07 26       	eor	r0, r23
    3138:	0a d0       	rcall	.+20     	; 0x314e <__divmodhi4_neg1>
    313a:	77 fd       	sbrc	r23, 7
    313c:	04 d0       	rcall	.+8      	; 0x3146 <__divmodhi4_neg2>
    313e:	2e d0       	rcall	.+92     	; 0x319c <__udivmodhi4>
    3140:	06 d0       	rcall	.+12     	; 0x314e <__divmodhi4_neg1>
    3142:	00 20       	and	r0, r0
    3144:	1a f4       	brpl	.+6      	; 0x314c <__divmodhi4_exit>

00003146 <__divmodhi4_neg2>:
    3146:	70 95       	com	r23
    3148:	61 95       	neg	r22
    314a:	7f 4f       	sbci	r23, 0xFF	; 255

0000314c <__divmodhi4_exit>:
    314c:	08 95       	ret

0000314e <__divmodhi4_neg1>:
    314e:	f6 f7       	brtc	.-4      	; 0x314c <__divmodhi4_exit>
    3150:	90 95       	com	r25
    3152:	81 95       	neg	r24
    3154:	9f 4f       	sbci	r25, 0xFF	; 255
    3156:	08 95       	ret

00003158 <__udivmodsi4>:
    3158:	a1 e2       	ldi	r26, 0x21	; 33
    315a:	1a 2e       	mov	r1, r26
    315c:	aa 1b       	sub	r26, r26
    315e:	bb 1b       	sub	r27, r27
    3160:	fd 01       	movw	r30, r26
    3162:	0d c0       	rjmp	.+26     	; 0x317e <__udivmodsi4_ep>

00003164 <__udivmodsi4_loop>:
    3164:	aa 1f       	adc	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	ee 1f       	adc	r30, r30
    316a:	ff 1f       	adc	r31, r31
    316c:	a2 17       	cp	r26, r18
    316e:	b3 07       	cpc	r27, r19
    3170:	e4 07       	cpc	r30, r20
    3172:	f5 07       	cpc	r31, r21
    3174:	20 f0       	brcs	.+8      	; 0x317e <__udivmodsi4_ep>
    3176:	a2 1b       	sub	r26, r18
    3178:	b3 0b       	sbc	r27, r19
    317a:	e4 0b       	sbc	r30, r20
    317c:	f5 0b       	sbc	r31, r21

0000317e <__udivmodsi4_ep>:
    317e:	66 1f       	adc	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	1a 94       	dec	r1
    3188:	69 f7       	brne	.-38     	; 0x3164 <__udivmodsi4_loop>
    318a:	60 95       	com	r22
    318c:	70 95       	com	r23
    318e:	80 95       	com	r24
    3190:	90 95       	com	r25
    3192:	9b 01       	movw	r18, r22
    3194:	ac 01       	movw	r20, r24
    3196:	bd 01       	movw	r22, r26
    3198:	cf 01       	movw	r24, r30
    319a:	08 95       	ret

0000319c <__udivmodhi4>:
    319c:	aa 1b       	sub	r26, r26
    319e:	bb 1b       	sub	r27, r27
    31a0:	51 e1       	ldi	r21, 0x11	; 17
    31a2:	07 c0       	rjmp	.+14     	; 0x31b2 <__udivmodhi4_ep>

000031a4 <__udivmodhi4_loop>:
    31a4:	aa 1f       	adc	r26, r26
    31a6:	bb 1f       	adc	r27, r27
    31a8:	a6 17       	cp	r26, r22
    31aa:	b7 07       	cpc	r27, r23
    31ac:	10 f0       	brcs	.+4      	; 0x31b2 <__udivmodhi4_ep>
    31ae:	a6 1b       	sub	r26, r22
    31b0:	b7 0b       	sbc	r27, r23

000031b2 <__udivmodhi4_ep>:
    31b2:	88 1f       	adc	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	5a 95       	dec	r21
    31b8:	a9 f7       	brne	.-22     	; 0x31a4 <__udivmodhi4_loop>
    31ba:	80 95       	com	r24
    31bc:	90 95       	com	r25
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	08 95       	ret

000031c4 <__prologue_saves__>:
    31c4:	2f 92       	push	r2
    31c6:	3f 92       	push	r3
    31c8:	4f 92       	push	r4
    31ca:	5f 92       	push	r5
    31cc:	6f 92       	push	r6
    31ce:	7f 92       	push	r7
    31d0:	8f 92       	push	r8
    31d2:	9f 92       	push	r9
    31d4:	af 92       	push	r10
    31d6:	bf 92       	push	r11
    31d8:	cf 92       	push	r12
    31da:	df 92       	push	r13
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	ca 1b       	sub	r28, r26
    31ee:	db 0b       	sbc	r29, r27
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	09 94       	ijmp

000031fc <__epilogue_restores__>:
    31fc:	2a 88       	ldd	r2, Y+18	; 0x12
    31fe:	39 88       	ldd	r3, Y+17	; 0x11
    3200:	48 88       	ldd	r4, Y+16	; 0x10
    3202:	5f 84       	ldd	r5, Y+15	; 0x0f
    3204:	6e 84       	ldd	r6, Y+14	; 0x0e
    3206:	7d 84       	ldd	r7, Y+13	; 0x0d
    3208:	8c 84       	ldd	r8, Y+12	; 0x0c
    320a:	9b 84       	ldd	r9, Y+11	; 0x0b
    320c:	aa 84       	ldd	r10, Y+10	; 0x0a
    320e:	b9 84       	ldd	r11, Y+9	; 0x09
    3210:	c8 84       	ldd	r12, Y+8	; 0x08
    3212:	df 80       	ldd	r13, Y+7	; 0x07
    3214:	ee 80       	ldd	r14, Y+6	; 0x06
    3216:	fd 80       	ldd	r15, Y+5	; 0x05
    3218:	0c 81       	ldd	r16, Y+4	; 0x04
    321a:	1b 81       	ldd	r17, Y+3	; 0x03
    321c:	aa 81       	ldd	r26, Y+2	; 0x02
    321e:	b9 81       	ldd	r27, Y+1	; 0x01
    3220:	ce 0f       	add	r28, r30
    3222:	d1 1d       	adc	r29, r1
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	ed 01       	movw	r28, r26
    3230:	08 95       	ret

00003232 <itoa>:
    3232:	fb 01       	movw	r30, r22
    3234:	9f 01       	movw	r18, r30
    3236:	e8 94       	clt
    3238:	42 30       	cpi	r20, 0x02	; 2
    323a:	c4 f0       	brlt	.+48     	; 0x326c <itoa+0x3a>
    323c:	45 32       	cpi	r20, 0x25	; 37
    323e:	b4 f4       	brge	.+44     	; 0x326c <itoa+0x3a>
    3240:	4a 30       	cpi	r20, 0x0A	; 10
    3242:	29 f4       	brne	.+10     	; 0x324e <itoa+0x1c>
    3244:	97 fb       	bst	r25, 7
    3246:	1e f4       	brtc	.+6      	; 0x324e <itoa+0x1c>
    3248:	90 95       	com	r25
    324a:	81 95       	neg	r24
    324c:	9f 4f       	sbci	r25, 0xFF	; 255
    324e:	64 2f       	mov	r22, r20
    3250:	77 27       	eor	r23, r23
    3252:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    3256:	80 5d       	subi	r24, 0xD0	; 208
    3258:	8a 33       	cpi	r24, 0x3A	; 58
    325a:	0c f0       	brlt	.+2      	; 0x325e <itoa+0x2c>
    325c:	89 5d       	subi	r24, 0xD9	; 217
    325e:	81 93       	st	Z+, r24
    3260:	cb 01       	movw	r24, r22
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	a1 f7       	brne	.-24     	; 0x324e <itoa+0x1c>
    3266:	16 f4       	brtc	.+4      	; 0x326c <itoa+0x3a>
    3268:	5d e2       	ldi	r21, 0x2D	; 45
    326a:	51 93       	st	Z+, r21
    326c:	10 82       	st	Z, r1
    326e:	c9 01       	movw	r24, r18
    3270:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <strrev>

00003274 <strrev>:
    3274:	dc 01       	movw	r26, r24
    3276:	fc 01       	movw	r30, r24
    3278:	67 2f       	mov	r22, r23
    327a:	71 91       	ld	r23, Z+
    327c:	77 23       	and	r23, r23
    327e:	e1 f7       	brne	.-8      	; 0x3278 <strrev+0x4>
    3280:	32 97       	sbiw	r30, 0x02	; 2
    3282:	04 c0       	rjmp	.+8      	; 0x328c <strrev+0x18>
    3284:	7c 91       	ld	r23, X
    3286:	6d 93       	st	X+, r22
    3288:	70 83       	st	Z, r23
    328a:	62 91       	ld	r22, -Z
    328c:	ae 17       	cp	r26, r30
    328e:	bf 07       	cpc	r27, r31
    3290:	c8 f3       	brcs	.-14     	; 0x3284 <strrev+0x10>
    3292:	08 95       	ret

00003294 <_exit>:
    3294:	f8 94       	cli

00003296 <__stop_program>:
    3296:	ff cf       	rjmp	.-2      	; 0x3296 <__stop_program>
