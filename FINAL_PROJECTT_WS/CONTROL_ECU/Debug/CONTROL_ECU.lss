
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002818  000028ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007a  0080007a  000028c6  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e8  00000000  00000000  000057b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__vector_4>
      14:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_9>
      28:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__vector_10>
      2c:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 0a 	call	0x1460	; 0x1460 <main>
      8a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

#include "GPIO.h"
#include "avr/io.h"
#include "buzzer.h"
//
void Buzzer_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(PORTC_ID, PIN7_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 ad 0b 	call	0x175a	; 0x175a <GPIO_setupPinDirection>
    Buzzer_off();
     b58:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Buzzer_off>
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Buzzer_on>:

void Buzzer_on(void) {
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_HIGH);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	67 e0       	ldi	r22, 0x07	; 7
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <Buzzer_off>:

void Buzzer_off(void) {
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
    GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	67 e0       	ldi	r22, 0x07	; 7
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <timer_callback>:
TWI_ConfigType TWI_config = {TWI_BAUDRATE_400K, ADDRESS_1};

/*
 * Callback function for timer interrupt to increment global count
 */
void timer_callback(void) {
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	g_count++;
     b9a:	80 91 7b 00 	lds	r24, 0x007B
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 7b 00 	sts	0x007B, r24
}
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <receive_and_store_password>:

/*
 * Receives password via UART and stores it in EEPROM at specified address
 */
void receive_and_store_password(uint16 address, uint8* password) {
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	63 97       	sbiw	r28, 0x13	; 19
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	99 8b       	std	Y+17, r25	; 0x11
     bc4:	88 8b       	std	Y+16, r24	; 0x10
     bc6:	7b 8b       	std	Y+19, r23	; 0x13
     bc8:	6a 8b       	std	Y+18, r22	; 0x12
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     bca:	1f 86       	std	Y+15, r1	; 0x0f
     bcc:	96 c0       	rjmp	.+300    	; 0xcfa <receive_and_store_password+0x150>
		password[i] = UART_recieveByte();
     bce:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	8a 89       	ldd	r24, Y+18	; 0x12
     bd6:	9b 89       	ldd	r25, Y+19	; 0x13
     bd8:	8c 01       	movw	r16, r24
     bda:	02 0f       	add	r16, r18
     bdc:	13 1f       	adc	r17, r19
     bde:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
     be2:	f8 01       	movw	r30, r16
     be4:	80 83       	st	Z, r24
		EEPROM_writeByte(address + i, password[i]);
     be6:	8f 85       	ldd	r24, Y+15	; 0x0f
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	88 89       	ldd	r24, Y+16	; 0x10
     bee:	99 89       	ldd	r25, Y+17	; 0x11
     bf0:	a9 01       	movw	r20, r18
     bf2:	48 0f       	add	r20, r24
     bf4:	59 1f       	adc	r21, r25
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	8a 89       	ldd	r24, Y+18	; 0x12
     bfe:	9b 89       	ldd	r25, Y+19	; 0x13
     c00:	fc 01       	movw	r30, r24
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	20 81       	ld	r18, Z
     c08:	ca 01       	movw	r24, r20
     c0a:	62 2f       	mov	r22, r18
     c0c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EEPROM_writeByte>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a0 e2       	ldi	r26, 0x20	; 32
     c16:	b1 e4       	ldi	r27, 0x41	; 65
     c18:	8b 87       	std	Y+11, r24	; 0x0b
     c1a:	9c 87       	std	Y+12, r25	; 0x0c
     c1c:	ad 87       	std	Y+13, r26	; 0x0d
     c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c20:	6b 85       	ldd	r22, Y+11	; 0x0b
     c22:	7c 85       	ldd	r23, Y+12	; 0x0c
     c24:	8d 85       	ldd	r24, Y+13	; 0x0d
     c26:	9e 85       	ldd	r25, Y+14	; 0x0e
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	4a ef       	ldi	r20, 0xFA	; 250
     c2e:	54 e4       	ldi	r21, 0x44	; 68
     c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	8f 83       	std	Y+7, r24	; 0x07
     c3a:	98 87       	std	Y+8, r25	; 0x08
     c3c:	a9 87       	std	Y+9, r26	; 0x09
     c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c40:	6f 81       	ldd	r22, Y+7	; 0x07
     c42:	78 85       	ldd	r23, Y+8	; 0x08
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c54:	88 23       	and	r24, r24
     c56:	2c f4       	brge	.+10     	; 0xc62 <receive_and_store_password+0xb8>
		__ticks = 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	3f c0       	rjmp	.+126    	; 0xce0 <receive_and_store_password+0x136>
	else if (__tmp > 65535)
     c62:	6f 81       	ldd	r22, Y+7	; 0x07
     c64:	78 85       	ldd	r23, Y+8	; 0x08
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	4f e7       	ldi	r20, 0x7F	; 127
     c70:	57 e4       	ldi	r21, 0x47	; 71
     c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c76:	18 16       	cp	r1, r24
     c78:	4c f5       	brge	.+82     	; 0xccc <receive_and_store_password+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c80:	9e 85       	ldd	r25, Y+14	; 0x0e
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <receive_and_store_password+0x118>
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <receive_and_store_password+0x106>
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb8:	8d 81       	ldd	r24, Y+5	; 0x05
     cba:	9e 81       	ldd	r25, Y+6	; 0x06
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	9e 83       	std	Y+6, r25	; 0x06
     cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	69 f7       	brne	.-38     	; 0xca4 <receive_and_store_password+0xfa>
     cca:	14 c0       	rjmp	.+40     	; 0xcf4 <receive_and_store_password+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ccc:	6f 81       	ldd	r22, Y+7	; 0x07
     cce:	78 85       	ldd	r23, Y+8	; 0x08
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <receive_and_store_password+0x142>
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01

/*
 * Receives password via UART and stores it in EEPROM at specified address
 */
void receive_and_store_password(uint16 address, uint8* password) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	8f 87       	std	Y+15, r24	; 0x0f
     cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfc:	85 30       	cpi	r24, 0x05	; 5
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <receive_and_store_password+0x158>
     d00:	66 cf       	rjmp	.-308    	; 0xbce <receive_and_store_password+0x24>
		password[i] = UART_recieveByte();
		EEPROM_writeByte(address + i, password[i]);
		_delay_ms(10);
	}
}
     d02:	63 96       	adiw	r28, 0x13	; 19
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <compare_passwords>:

/*
 * Compares two passwords stored at given EEPROM addresses
 * Returns 1 if passwords match, 0 otherwise
 */
uint8 compare_passwords(uint16 address1, uint16 address2) {
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	6f 97       	sbiw	r28, 0x1f	; 31
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	9c 8f       	std	Y+28, r25	; 0x1c
     d2e:	8b 8f       	std	Y+27, r24	; 0x1b
     d30:	7e 8f       	std	Y+30, r23	; 0x1e
     d32:	6d 8f       	std	Y+29, r22	; 0x1d
	uint8 password1[PASSWORD_LENGTH];
	uint8 password2[PASSWORD_LENGTH];

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     d34:	18 8a       	std	Y+16, r1	; 0x10
     d36:	9d c0       	rjmp	.+314    	; 0xe72 <compare_passwords+0x15a>
		EEPROM_readByte(address1 + i, &password1[i]);
     d38:	88 89       	ldd	r24, Y+16	; 0x10
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d42:	a9 01       	movw	r20, r18
     d44:	48 0f       	add	r20, r24
     d46:	59 1f       	adc	r21, r25
     d48:	88 89       	ldd	r24, Y+16	; 0x10
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9e 01       	movw	r18, r28
     d50:	2f 5e       	subi	r18, 0xEF	; 239
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	28 0f       	add	r18, r24
     d56:	39 1f       	adc	r19, r25
     d58:	ca 01       	movw	r24, r20
     d5a:	b9 01       	movw	r22, r18
     d5c:	0e 94 4d 0b 	call	0x169a	; 0x169a <EEPROM_readByte>
		EEPROM_readByte(address2 + i, &password2[i]);
     d60:	88 89       	ldd	r24, Y+16	; 0x10
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d6a:	a9 01       	movw	r20, r18
     d6c:	48 0f       	add	r20, r24
     d6e:	59 1f       	adc	r21, r25
     d70:	88 89       	ldd	r24, Y+16	; 0x10
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9e 01       	movw	r18, r28
     d78:	2a 5e       	subi	r18, 0xEA	; 234
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	ca 01       	movw	r24, r20
     d82:	b9 01       	movw	r22, r18
     d84:	0e 94 4d 0b 	call	0x169a	; 0x169a <EEPROM_readByte>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e2       	ldi	r26, 0x20	; 32
     d8e:	b1 e4       	ldi	r27, 0x41	; 65
     d90:	8b 87       	std	Y+11, r24	; 0x0b
     d92:	9c 87       	std	Y+12, r25	; 0x0c
     d94:	ad 87       	std	Y+13, r26	; 0x0d
     d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d98:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	4a ef       	ldi	r20, 0xFA	; 250
     da6:	54 e4       	ldi	r21, 0x44	; 68
     da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	8f 83       	std	Y+7, r24	; 0x07
     db2:	98 87       	std	Y+8, r25	; 0x08
     db4:	a9 87       	std	Y+9, r26	; 0x09
     db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db8:	6f 81       	ldd	r22, Y+7	; 0x07
     dba:	78 85       	ldd	r23, Y+8	; 0x08
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e8       	ldi	r20, 0x80	; 128
     dc6:	5f e3       	ldi	r21, 0x3F	; 63
     dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dcc:	88 23       	and	r24, r24
     dce:	2c f4       	brge	.+10     	; 0xdda <compare_passwords+0xc2>
		__ticks = 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	3f c0       	rjmp	.+126    	; 0xe58 <compare_passwords+0x140>
	else if (__tmp > 65535)
     dda:	6f 81       	ldd	r22, Y+7	; 0x07
     ddc:	78 85       	ldd	r23, Y+8	; 0x08
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	3f ef       	ldi	r19, 0xFF	; 255
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	57 e4       	ldi	r21, 0x47	; 71
     dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dee:	18 16       	cp	r1, r24
     df0:	4c f5       	brge	.+82     	; 0xe44 <compare_passwords+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df2:	6b 85       	ldd	r22, Y+11	; 0x0b
     df4:	7c 85       	ldd	r23, Y+12	; 0x0c
     df6:	8d 85       	ldd	r24, Y+13	; 0x0d
     df8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e2       	ldi	r20, 0x20	; 32
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <compare_passwords+0x122>
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <compare_passwords+0x110>
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	69 f7       	brne	.-38     	; 0xe1c <compare_passwords+0x104>
     e42:	14 c0       	rjmp	.+40     	; 0xe6c <compare_passwords+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e44:	6f 81       	ldd	r22, Y+7	; 0x07
     e46:	78 85       	ldd	r23, Y+8	; 0x08
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <compare_passwords+0x14c>
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 compare_passwords(uint16 address1, uint16 address2) {
	uint8 password1[PASSWORD_LENGTH];
	uint8 password2[PASSWORD_LENGTH];

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     e6c:	88 89       	ldd	r24, Y+16	; 0x10
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	88 8b       	std	Y+16, r24	; 0x10
     e72:	88 89       	ldd	r24, Y+16	; 0x10
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	08 f4       	brcc	.+2      	; 0xe7a <compare_passwords+0x162>
     e78:	5f cf       	rjmp	.-322    	; 0xd38 <compare_passwords+0x20>
		EEPROM_readByte(address1 + i, &password1[i]);
		EEPROM_readByte(address2 + i, &password2[i]);
		_delay_ms(10);
	}

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     e7a:	1f 86       	std	Y+15, r1	; 0x0f
     e7c:	19 c0       	rjmp	.+50     	; 0xeb0 <compare_passwords+0x198>
		if (password1[i] != password2[i]) return 0;
     e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	ce 01       	movw	r24, r28
     e86:	41 96       	adiw	r24, 0x11	; 17
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	40 81       	ld	r20, Z
     e90:	8f 85       	ldd	r24, Y+15	; 0x0f
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	ce 01       	movw	r24, r28
     e98:	46 96       	adiw	r24, 0x16	; 22
     e9a:	fc 01       	movw	r30, r24
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	80 81       	ld	r24, Z
     ea2:	48 17       	cp	r20, r24
     ea4:	11 f0       	breq	.+4      	; 0xeaa <compare_passwords+0x192>
     ea6:	1f 8e       	std	Y+31, r1	; 0x1f
     ea8:	08 c0       	rjmp	.+16     	; 0xeba <compare_passwords+0x1a2>
		EEPROM_readByte(address1 + i, &password1[i]);
		EEPROM_readByte(address2 + i, &password2[i]);
		_delay_ms(10);
	}

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	8f 87       	std	Y+15, r24	; 0x0f
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	85 30       	cpi	r24, 0x05	; 5
     eb4:	20 f3       	brcs	.-56     	; 0xe7e <compare_passwords+0x166>
		if (password1[i] != password2[i]) return 0;
	}
	return 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	8f 8f       	std	Y+31, r24	; 0x1f
     eba:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
     ebc:	6f 96       	adiw	r28, 0x1f	; 31
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <door_open>:

/*
 * Opens the door by rotating the motor in the clockwise direction
 */
void door_open(void) {
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	g_count = 0;
     ed6:	10 92 7b 00 	sts	0x007B, r1
	Timer_init(&timer_config);
     eda:	80 e7       	ldi	r24, 0x70	; 112
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 81 10 	call	0x2102	; 0x2102 <Timer_init>
	Timer_setCallBack(timer_callback, TIMER1_ID);
     ee2:	89 ec       	ldi	r24, 0xC9	; 201
     ee4:	95 e0       	ldi	r25, 0x05	; 5
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	0e 94 c5 11 	call	0x238a	; 0x238a <Timer_setCallBack>
	DcMotor_Rotate(CW, 100);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	64 e6       	ldi	r22, 0x64	; 100
     ef0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DcMotor_Rotate>

	while (g_count < DOOR_OPERATION_DURATION) {}
     ef4:	80 91 7b 00 	lds	r24, 0x007B
     ef8:	8f 30       	cpi	r24, 0x0F	; 15
     efa:	e0 f3       	brcs	.-8      	; 0xef4 <door_open+0x26>

	DcMotor_Rotate(STOP, 0);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DcMotor_Rotate>
	Timer_deInit(TIMER1_ID);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 66 11 	call	0x22cc	; 0x22cc <Timer_deInit>
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <door_close>:

/*
 * Closes the door by rotating the motor in the anti-clockwise direction
 */
void door_close(void) {
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	g_count = 0;
     f18:	10 92 7b 00 	sts	0x007B, r1
	Timer_init(&timer_config);
     f1c:	80 e7       	ldi	r24, 0x70	; 112
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 81 10 	call	0x2102	; 0x2102 <Timer_init>
	Timer_setCallBack(timer_callback, TIMER1_ID);
     f24:	89 ec       	ldi	r24, 0xC9	; 201
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	0e 94 c5 11 	call	0x238a	; 0x238a <Timer_setCallBack>
	DcMotor_Rotate(A_CW, 100);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	64 e6       	ldi	r22, 0x64	; 100
     f32:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DcMotor_Rotate>

	while (g_count < DOOR_OPERATION_DURATION) {}
     f36:	80 91 7b 00 	lds	r24, 0x007B
     f3a:	8f 30       	cpi	r24, 0x0F	; 15
     f3c:	e0 f3       	brcs	.-8      	; 0xf36 <door_close+0x26>

	DcMotor_Rotate(STOP, 0);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DcMotor_Rotate>
	Timer_deInit(TIMER1_ID);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	0e 94 66 11 	call	0x22cc	; 0x22cc <Timer_deInit>
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <continuous_buzzer_alert>:

/*
 * Activates the buzzer continuously until a signal to stop is received
 */
void continuous_buzzer_alert(void) {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	uint8 buzzer_status = UART_recieveByte();
     f5c:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <continuous_buzzer_alert+0x1c>
	while (buzzer_status == 1) {
		Buzzer_on();
     f64:	0e 94 b1 05 	call	0xb62	; 0xb62 <Buzzer_on>
		buzzer_status = UART_recieveByte();
     f68:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
     f6c:	89 83       	std	Y+1, r24	; 0x01
/*
 * Activates the buzzer continuously until a signal to stop is received
 */
void continuous_buzzer_alert(void) {
	uint8 buzzer_status = UART_recieveByte();
	while (buzzer_status == 1) {
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	c1 f3       	breq	.-16     	; 0xf64 <continuous_buzzer_alert+0x12>
		Buzzer_on();
		buzzer_status = UART_recieveByte();
	}
	Buzzer_off();
     f74:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Buzzer_off>
}
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <setup_password>:

/*
 * Sets up the initial password, requiring the user to enter and re-enter it for confirmation
 */
void setup_password(void) {
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	a6 97       	sbiw	r28, 0x26	; 38
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LENGTH] = {0};
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	fe 01       	movw	r30, r28
     f98:	7d 96       	adiw	r30, 0x1d	; 29
     f9a:	df 01       	movw	r26, r30
     f9c:	98 2f       	mov	r25, r24
     f9e:	1d 92       	st	X+, r1
     fa0:	9a 95       	dec	r25
     fa2:	e9 f7       	brne	.-6      	; 0xf9e <setup_password+0x1e>
	uint8 re_entered_password[PASSWORD_LENGTH] = {0};
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	fe 01       	movw	r30, r28
     fa8:	b2 96       	adiw	r30, 0x22	; 34
     faa:	df 01       	movw	r26, r30
     fac:	98 2f       	mov	r25, r24
     fae:	1d 92       	st	X+, r1
     fb0:	9a 95       	dec	r25
     fb2:	e9 f7       	brne	.-6      	; 0xfae <setup_password+0x2e>
     fb4:	06 c1       	rjmp	.+524    	; 0x11c2 <setup_password+0x242>

	while (!setup_complete) {
		receive_and_store_password(PASSWORD_ADDRESS_1, password);
     fb6:	9e 01       	movw	r18, r28
     fb8:	23 5e       	subi	r18, 0xE3	; 227
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	80 e1       	ldi	r24, 0x10	; 16
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	b9 01       	movw	r22, r18
     fc2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <receive_and_store_password>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	aa ef       	ldi	r26, 0xFA	; 250
     fcc:	b3 e4       	ldi	r27, 0x43	; 67
     fce:	89 8f       	std	Y+25, r24	; 0x19
     fd0:	9a 8f       	std	Y+26, r25	; 0x1a
     fd2:	ab 8f       	std	Y+27, r26	; 0x1b
     fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a ef       	ldi	r20, 0xFA	; 250
     fe4:	54 e4       	ldi	r21, 0x44	; 68
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8d 8b       	std	Y+21, r24	; 0x15
     ff0:	9e 8b       	std	Y+22, r25	; 0x16
     ff2:	af 8b       	std	Y+23, r26	; 0x17
     ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ff6:	6d 89       	ldd	r22, Y+21	; 0x15
     ff8:	7e 89       	ldd	r23, Y+22	; 0x16
     ffa:	8f 89       	ldd	r24, Y+23	; 0x17
     ffc:	98 8d       	ldd	r25, Y+24	; 0x18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <setup_password+0x98>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <setup_password+0x116>
	else if (__tmp > 65535)
    1018:	6d 89       	ldd	r22, Y+21	; 0x15
    101a:	7e 89       	ldd	r23, Y+22	; 0x16
    101c:	8f 89       	ldd	r24, Y+23	; 0x17
    101e:	98 8d       	ldd	r25, Y+24	; 0x18
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	57 e4       	ldi	r21, 0x47	; 71
    1028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <setup_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	69 8d       	ldd	r22, Y+25	; 0x19
    1032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <setup_password+0xf8>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	89 8b       	std	Y+17, r24	; 0x11
    1062:	89 89       	ldd	r24, Y+17	; 0x11
    1064:	9a 89       	ldd	r25, Y+18	; 0x12
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <setup_password+0xe6>
    106a:	9a 8b       	std	Y+18, r25	; 0x12
    106c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8b 89       	ldd	r24, Y+19	; 0x13
    1070:	9c 89       	ldd	r25, Y+20	; 0x14
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <setup_password+0xda>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <setup_password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6d 89       	ldd	r22, Y+21	; 0x15
    1084:	7e 89       	ldd	r23, Y+22	; 0x16
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	98 8d       	ldd	r25, Y+24	; 0x18
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9c 8b       	std	Y+20, r25	; 0x14
    1094:	8b 8b       	std	Y+19, r24	; 0x13
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	98 8b       	std	Y+16, r25	; 0x10
    109c:	8f 87       	std	Y+15, r24	; 0x0f
    109e:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a0:	98 89       	ldd	r25, Y+16	; 0x10
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <setup_password+0x122>
    10a6:	98 8b       	std	Y+16, r25	; 0x10
    10a8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		receive_and_store_password(PASSWORD_ADDRESS_2, re_entered_password);
    10aa:	9e 01       	movw	r18, r28
    10ac:	2e 5d       	subi	r18, 0xDE	; 222
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	85 e1       	ldi	r24, 0x15	; 21
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <receive_and_store_password>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	aa ef       	ldi	r26, 0xFA	; 250
    10c0:	b3 e4       	ldi	r27, 0x43	; 67
    10c2:	8b 87       	std	Y+11, r24	; 0x0b
    10c4:	9c 87       	std	Y+12, r25	; 0x0c
    10c6:	ad 87       	std	Y+13, r26	; 0x0d
    10c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    10cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4a ef       	ldi	r20, 0xFA	; 250
    10d8:	54 e4       	ldi	r21, 0x44	; 68
    10da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	8f 83       	std	Y+7, r24	; 0x07
    10e4:	98 87       	std	Y+8, r25	; 0x08
    10e6:	a9 87       	std	Y+9, r26	; 0x09
    10e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	5f e3       	ldi	r21, 0x3F	; 63
    10fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10fe:	88 23       	and	r24, r24
    1100:	2c f4       	brge	.+10     	; 0x110c <setup_password+0x18c>
		__ticks = 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	3f c0       	rjmp	.+126    	; 0x118a <setup_password+0x20a>
	else if (__tmp > 65535)
    110c:	6f 81       	ldd	r22, Y+7	; 0x07
    110e:	78 85       	ldd	r23, Y+8	; 0x08
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	4c f5       	brge	.+82     	; 0x1176 <setup_password+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1124:	6b 85       	ldd	r22, Y+11	; 0x0b
    1126:	7c 85       	ldd	r23, Y+12	; 0x0c
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	9e 85       	ldd	r25, Y+14	; 0x0e
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e2       	ldi	r20, 0x20	; 32
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	0f c0       	rjmp	.+30     	; 0x116c <setup_password+0x1ec>
    114e:	88 ec       	ldi	r24, 0xC8	; 200
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <setup_password+0x1da>
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	69 f7       	brne	.-38     	; 0x114e <setup_password+0x1ce>
    1174:	14 c0       	rjmp	.+40     	; 0x119e <setup_password+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	8d 83       	std	Y+5, r24	; 0x05
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <setup_password+0x216>
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		if (compare_passwords(PASSWORD_ADDRESS_1, PASSWORD_ADDRESS_2)) {
    119e:	80 e1       	ldi	r24, 0x10	; 16
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	65 e1       	ldi	r22, 0x15	; 21
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 8c 06 	call	0xd18	; 0xd18 <compare_passwords>
    11aa:	88 23       	and	r24, r24
    11ac:	39 f0       	breq	.+14     	; 0x11bc <setup_password+0x23c>
			UART_sendByte(1);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
			setup_complete = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 7c 00 	sts	0x007C, r24
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <setup_password+0x242>
		} else {
			UART_sendByte(0);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
 */
void setup_password(void) {
	uint8 password[PASSWORD_LENGTH] = {0};
	uint8 re_entered_password[PASSWORD_LENGTH] = {0};

	while (!setup_complete) {
    11c2:	80 91 7c 00 	lds	r24, 0x007C
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <setup_password+0x24c>
    11ca:	f5 ce       	rjmp	.-534    	; 0xfb6 <setup_password+0x36>
			setup_complete = 1;
		} else {
			UART_sendByte(0);
		}
	}
}
    11cc:	a6 96       	adiw	r28, 0x26	; 38
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <login_password>:

/*
 * Manages the login process by receiving the login password and comparing it with the stored password
 */
void login_password(void) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	63 97       	sbiw	r28, 0x13	; 19
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
	uint8 login_password[PASSWORD_LENGTH] = {0};
    11f2:	85 e0       	ldi	r24, 0x05	; 5
    11f4:	fe 01       	movw	r30, r28
    11f6:	3f 96       	adiw	r30, 0x0f	; 15
    11f8:	df 01       	movw	r26, r30
    11fa:	98 2f       	mov	r25, r24
    11fc:	1d 92       	st	X+, r1
    11fe:	9a 95       	dec	r25
    1200:	e9 f7       	brne	.-6      	; 0x11fc <login_password+0x1e>

	receive_and_store_password(PASSWORD_ADDRESS_3, login_password);
    1202:	9e 01       	movw	r18, r28
    1204:	21 5f       	subi	r18, 0xF1	; 241
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	8a e1       	ldi	r24, 0x1A	; 26
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	b9 01       	movw	r22, r18
    120e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <receive_and_store_password>

	if (compare_passwords(PASSWORD_ADDRESS_3, PASSWORD_ADDRESS_1)) {
    1212:	8a e1       	ldi	r24, 0x1A	; 26
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	60 e1       	ldi	r22, 0x10	; 16
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	0e 94 8c 06 	call	0xd18	; 0xd18 <compare_passwords>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <login_password+0x46>
    1222:	79 c0       	rjmp	.+242    	; 0x1316 <login_password+0x138>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a8 e4       	ldi	r26, 0x48	; 72
    122a:	b2 e4       	ldi	r27, 0x42	; 66
    122c:	8b 87       	std	Y+11, r24	; 0x0b
    122e:	9c 87       	std	Y+12, r25	; 0x0c
    1230:	ad 87       	std	Y+13, r26	; 0x0d
    1232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6b 85       	ldd	r22, Y+11	; 0x0b
    1236:	7c 85       	ldd	r23, Y+12	; 0x0c
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8f 83       	std	Y+7, r24	; 0x07
    124e:	98 87       	std	Y+8, r25	; 0x08
    1250:	a9 87       	std	Y+9, r26	; 0x09
    1252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <login_password+0x98>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <login_password+0x116>
	else if (__tmp > 65535)
    1276:	6f 81       	ldd	r22, Y+7	; 0x07
    1278:	78 85       	ldd	r23, Y+8	; 0x08
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <login_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <login_password+0xf8>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <login_password+0xe6>
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <login_password+0xda>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <login_password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <login_password+0x122>
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		UART_sendByte(1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		login_success = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 7a 00 	sts	0x007A, r24
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <login_password+0x148>
	}
	else
	{
		UART_sendByte(0);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		try++;
    131c:	80 91 7d 00 	lds	r24, 0x007D
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	80 93 7d 00 	sts	0x007D, r24
	}
	if (try == MAX_ATTEMPTS)
    1326:	80 91 7d 00 	lds	r24, 0x007D
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	c1 f4       	brne	.+48     	; 0x135e <login_password+0x180>
	{
		try = 0;
    132e:	10 92 7d 00 	sts	0x007D, r1
		g_count = 0;
    1332:	10 92 7b 00 	sts	0x007B, r1
		UART_sendByte(0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		Timer_init(&timer_config);
    133c:	80 e7       	ldi	r24, 0x70	; 112
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 81 10 	call	0x2102	; 0x2102 <Timer_init>
		Timer_setCallBack(timer_callback, TIMER1_ID);
    1344:	89 ec       	ldi	r24, 0xC9	; 201
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	0e 94 c5 11 	call	0x238a	; 0x238a <Timer_setCallBack>
		Buzzer_on();
    134e:	0e 94 b1 05 	call	0xb62	; 0xb62 <Buzzer_on>
		while (g_count < LOCKOUT_DURATION) {}
    1352:	80 91 7b 00 	lds	r24, 0x007B
    1356:	8c 33       	cpi	r24, 0x3C	; 60
    1358:	e0 f3       	brcs	.-8      	; 0x1352 <login_password+0x174>
		Buzzer_off();
    135a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Buzzer_off>
	}
}
    135e:	63 96       	adiw	r28, 0x13	; 19
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <renew_password>:

/*
 * Renews the password by requiring the user to enter the current password for verification
 */
void renew_password(void) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <renew_password+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <renew_password+0x8>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	uint8 renew_password[PASSWORD_LENGTH] = {0};
    137e:	85 e0       	ldi	r24, 0x05	; 5
    1380:	fe 01       	movw	r30, r28
    1382:	31 96       	adiw	r30, 0x01	; 1
    1384:	df 01       	movw	r26, r30
    1386:	98 2f       	mov	r25, r24
    1388:	1d 92       	st	X+, r1
    138a:	9a 95       	dec	r25
    138c:	e9 f7       	brne	.-6      	; 0x1388 <renew_password+0x18>
	try = 0;
    138e:	10 92 7d 00 	sts	0x007D, r1
	renew_success = 0;
    1392:	10 92 7e 00 	sts	0x007E, r1


	receive_and_store_password(PASSWORD_ADDRESS_4, renew_password);
    1396:	8f e1       	ldi	r24, 0x1F	; 31
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9e 01       	movw	r18, r28
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	b9 01       	movw	r22, r18
    13a2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <receive_and_store_password>

	if (compare_passwords(PASSWORD_ADDRESS_4, PASSWORD_ADDRESS_1)) {
    13a6:	8f e1       	ldi	r24, 0x1F	; 31
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	60 e1       	ldi	r22, 0x10	; 16
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 8c 06 	call	0xd18	; 0xd18 <compare_passwords>
    13b2:	88 23       	and	r24, r24
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <renew_password+0x54>
		UART_sendByte(1);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		renew_success = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 7e 00 	sts	0x007E, r24
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <renew_password+0x64>
	} else {
		UART_sendByte(0);
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		try++;
    13ca:	80 91 7d 00 	lds	r24, 0x007D
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	80 93 7d 00 	sts	0x007D, r24
	}
	if (try == MAX_ATTEMPTS) {
    13d4:	80 91 7d 00 	lds	r24, 0x007D
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	c1 f4       	brne	.+48     	; 0x140c <renew_password+0x9c>
		g_count = 0;
    13dc:	10 92 7b 00 	sts	0x007B, r1
		UART_sendByte(0);
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		Timer_init(&timer_config);
    13e6:	80 e7       	ldi	r24, 0x70	; 112
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 81 10 	call	0x2102	; 0x2102 <Timer_init>
		Timer_setCallBack(timer_callback, TIMER1_ID);
    13ee:	89 ec       	ldi	r24, 0xC9	; 201
    13f0:	95 e0       	ldi	r25, 0x05	; 5
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	0e 94 c5 11 	call	0x238a	; 0x238a <Timer_setCallBack>
		Buzzer_on();
    13f8:	0e 94 b1 05 	call	0xb62	; 0xb62 <Buzzer_on>
		while (g_count < LOCKOUT_DURATION) {}
    13fc:	80 91 7b 00 	lds	r24, 0x007B
    1400:	8c 33       	cpi	r24, 0x3C	; 60
    1402:	e0 f3       	brcs	.-8      	; 0x13fc <renew_password+0x8c>
		Buzzer_off();
    1404:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Buzzer_off>
		try = 0;
    1408:	10 92 7d 00 	sts	0x007D, r1
	}

}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <handle_pir_and_door>:

/*
 * Handles PIR sensor and controls the door's open and close operations based on PIR state
 */
void handle_pir_and_door(void) {
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	current_pir_state = 0xFF;
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	80 93 68 00 	sts	0x0068, r24
	uint8 pir_state;

	while (1) {
		pir_state = PIR_getState();
    142c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <PIR_getState>
    1430:	89 83       	std	Y+1, r24	; 0x01

		if (pir_state != current_pir_state) {
    1432:	90 91 68 00 	lds	r25, 0x0068
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	89 17       	cp	r24, r25
    143a:	31 f0       	breq	.+12     	; 0x1448 <handle_pir_and_door+0x2c>
			UART_sendByte(pir_state);
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
			current_pir_state = pir_state;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	80 93 68 00 	sts	0x0068, r24
		}

		if (pir_state == 0) {
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	88 23       	and	r24, r24
    144c:	79 f7       	brne	.-34     	; 0x142c <handle_pir_and_door+0x10>
			UART_sendByte(0);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
			door_close();
    1454:	0e 94 88 07 	call	0xf10	; 0xf10 <door_close>
			break;
		}
	}
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <main>:
}

/*
 * Main function to initialize peripherals, setup password, and manage user inputs for login and password renewal
 */
int main(void) {
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <main+0x6>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7); /* Enable global interrupts */
    146c:	af e5       	ldi	r26, 0x5F	; 95
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ef e5       	ldi	r30, 0x5F	; 95
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8c 93       	st	X, r24
	TWI_init(&TWI_config);
    147a:	87 e7       	ldi	r24, 0x77	; 119
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_init>
	UART_init(&uart_config);
    1482:	89 e6       	ldi	r24, 0x69	; 105
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 77 12 	call	0x24ee	; 0x24ee <UART_init>
	Buzzer_init();
    148a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	DcMotor_Init();
    148e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <DcMotor_Init>
	PIR_init();
    1492:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <PIR_init>
	Timer_init(&timer_config);
    1496:	80 e7       	ldi	r24, 0x70	; 112
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 81 10 	call	0x2102	; 0x2102 <Timer_init>
	Timer_setCallBack(timer_callback, TIMER1_ID);
    149e:	89 ec       	ldi	r24, 0xC9	; 201
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	0e 94 c5 11 	call	0x238a	; 0x238a <Timer_setCallBack>
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <main+0x4e>

	while (setup_complete != 1) {
		setup_password();
    14aa:	0e 94 c0 07 	call	0xf80	; 0xf80 <setup_password>
	DcMotor_Init();
	PIR_init();
	Timer_init(&timer_config);
	Timer_setCallBack(timer_callback, TIMER1_ID);

	while (setup_complete != 1) {
    14ae:	80 91 7c 00 	lds	r24, 0x007C
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	d1 f7       	brne	.-12     	; 0x14aa <main+0x4a>
		setup_password();
	}
	while (1) {
		uint8 recieverByte = 0;
    14b6:	19 82       	std	Y+1, r1	; 0x01
		setup_complete = 0;
    14b8:	10 92 7c 00 	sts	0x007C, r1
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <main+0x64>
		while ((recieverByte != '+') && (recieverByte != '-')) {
			recieverByte = UART_recieveByte();
    14be:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
    14c2:	89 83       	std	Y+1, r24	; 0x01
		setup_password();
	}
	while (1) {
		uint8 recieverByte = 0;
		setup_complete = 0;
		while ((recieverByte != '+') && (recieverByte != '-')) {
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	8b 32       	cpi	r24, 0x2B	; 43
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <main+0x70>
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	8d 32       	cpi	r24, 0x2D	; 45
    14ce:	b9 f7       	brne	.-18     	; 0x14be <main+0x5e>
			recieverByte = UART_recieveByte();
		};
		switch (recieverByte) {
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3b 83       	std	Y+3, r19	; 0x03
    14d8:	2a 83       	std	Y+2, r18	; 0x02
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	8b 32       	cpi	r24, 0x2B	; 43
    14e0:	91 05       	cpc	r25, r1
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <main+0x90>
    14e4:	2a 81       	ldd	r18, Y+2	; 0x02
    14e6:	3b 81       	ldd	r19, Y+3	; 0x03
    14e8:	2d 32       	cpi	r18, 0x2D	; 45
    14ea:	31 05       	cpc	r19, r1
    14ec:	19 f1       	breq	.+70     	; 0x1534 <main+0xd4>
    14ee:	e3 cf       	rjmp	.-58     	; 0x14b6 <main+0x56>
		case '+':
			g_count = 0;
    14f0:	10 92 7b 00 	sts	0x007B, r1
			try = 0;
    14f4:	10 92 7d 00 	sts	0x007D, r1
			renew_success = 0;
    14f8:	10 92 7e 00 	sts	0x007E, r1
			login_success = 0;
    14fc:	10 92 7a 00 	sts	0x007A, r1
    1500:	0d c0       	rjmp	.+26     	; 0x151c <main+0xbc>
			while (!login_success) {
				login_password();
    1502:	0e 94 ef 08 	call	0x11de	; 0x11de <login_password>
				if(login_success) {
    1506:	80 91 7a 00 	lds	r24, 0x007A
    150a:	88 23       	and	r24, r24
    150c:	21 f0       	breq	.+8      	; 0x1516 <main+0xb6>
					UART_sendByte('L');
    150e:	8c e4       	ldi	r24, 0x4C	; 76
    1510:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
    1514:	03 c0       	rjmp	.+6      	; 0x151c <main+0xbc>
				} else {
					UART_sendByte(0);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		case '+':
			g_count = 0;
			try = 0;
			renew_success = 0;
			login_success = 0;
			while (!login_success) {
    151c:	80 91 7a 00 	lds	r24, 0x007A
    1520:	88 23       	and	r24, r24
    1522:	79 f3       	breq	.-34     	; 0x1502 <main+0xa2>
					UART_sendByte('L');
				} else {
					UART_sendByte(0);
				}
			}
			door_open();
    1524:	0e 94 67 07 	call	0xece	; 0xece <door_open>
			handle_pir_and_door();
    1528:	0e 94 0e 0a 	call	0x141c	; 0x141c <handle_pir_and_door>
			recieverByte = 0;
    152c:	19 82       	std	Y+1, r1	; 0x01
			login_success=0;
    152e:	10 92 7a 00 	sts	0x007A, r1
    1532:	c1 cf       	rjmp	.-126    	; 0x14b6 <main+0x56>
			break;

		case '-':
			login_success = 0;
    1534:	10 92 7a 00 	sts	0x007A, r1
			g_count = 0;
    1538:	10 92 7b 00 	sts	0x007B, r1
			setup_complete = 0;
    153c:	10 92 7c 00 	sts	0x007C, r1
			renew_success = 0;
    1540:	10 92 7e 00 	sts	0x007E, r1
			try = 0;
    1544:	10 92 7d 00 	sts	0x007D, r1
    1548:	0d c0       	rjmp	.+26     	; 0x1564 <main+0x104>
			while (!renew_success)
			{
				renew_password();
    154a:	0e 94 b8 09 	call	0x1370	; 0x1370 <renew_password>
				if(renew_success) {
    154e:	80 91 7e 00 	lds	r24, 0x007E
    1552:	88 23       	and	r24, r24
    1554:	21 f0       	breq	.+8      	; 0x155e <main+0xfe>
					UART_sendByte('L');
    1556:	8c e4       	ldi	r24, 0x4C	; 76
    1558:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <main+0x104>
				} else {
					UART_sendByte(0);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
			login_success = 0;
			g_count = 0;
			setup_complete = 0;
			renew_success = 0;
			try = 0;
			while (!renew_success)
    1564:	80 91 7e 00 	lds	r24, 0x007E
    1568:	88 23       	and	r24, r24
    156a:	79 f3       	breq	.-34     	; 0x154a <main+0xea>
					UART_sendByte('L');
				} else {
					UART_sendByte(0);
				}
			}
			renew_success = 0;
    156c:	10 92 7e 00 	sts	0x007E, r1
			recieverByte = 0;
    1570:	19 82       	std	Y+1, r1	; 0x01
			setup_complete = 0;
    1572:	10 92 7c 00 	sts	0x007C, r1
    1576:	9f cf       	rjmp	.-194    	; 0x14b6 <main+0x56>

00001578 <DcMotor_Init>:
#include "avr/io.h"
#include "gpio.h"
#include"pwm.h"

void DcMotor_Init(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1, PIN_OUTPUT);
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	66 e0       	ldi	r22, 0x06	; 6
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 ad 0b 	call	0x175a	; 0x175a <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2, PIN_OUTPUT);
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	67 e0       	ldi	r22, 0x07	; 7
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 ad 0b 	call	0x175a	; 0x175a <GPIO_setupPinDirection>
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN1, LOGIC_LOW);
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	66 e0       	ldi	r22, 0x06	; 6
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN2, LOGIC_LOW);
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	67 e0       	ldi	r22, 0x07	; 7
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DcMotor_Rotate+0x6>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
    if(state == CW) {
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	88 23       	and	r24, r24
    15c0:	59 f4       	brne	.+22     	; 0x15d8 <DcMotor_Rotate+0x2a>
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN1, LOGIC_HIGH);
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	66 e0       	ldi	r22, 0x06	; 6
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN2, LOGIC_LOW);
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	67 e0       	ldi	r22, 0x07	; 7
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
    15d6:	18 c0       	rjmp	.+48     	; 0x1608 <DcMotor_Rotate+0x5a>
    } else if(state == A_CW) {
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	59 f4       	brne	.+22     	; 0x15f4 <DcMotor_Rotate+0x46>
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN1, LOGIC_LOW);
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	66 e0       	ldi	r22, 0x06	; 6
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN2, LOGIC_HIGH);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	67 e0       	ldi	r22, 0x07	; 7
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
    15f2:	0a c0       	rjmp	.+20     	; 0x1608 <DcMotor_Rotate+0x5a>
    } else {
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN1, LOGIC_LOW);
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	66 e0       	ldi	r22, 0x06	; 6
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
        GPIO_writePin(MOTOR_PORT, MOTOR_PIN2, LOGIC_LOW);
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	67 e0       	ldi	r22, 0x07	; 7
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_writePin>
    }
    PWM_Timer0_Start(speed);
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <PWM_Timer0_Start>
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <EEPROM_writeByte+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <EEPROM_writeByte+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    162a:	0e 94 10 12 	call	0x2420	; 0x2420 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    162e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    1632:	88 30       	cpi	r24, 0x08	; 8
    1634:	11 f0       	breq	.+4      	; 0x163a <EEPROM_writeByte+0x22>
        return ERROR;
    1636:	1c 82       	std	Y+4, r1	; 0x04
    1638:	28 c0       	rjmp	.+80     	; 0x168a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	80 70       	andi	r24, 0x00	; 0
    1640:	97 70       	andi	r25, 0x07	; 7
    1642:	88 0f       	add	r24, r24
    1644:	89 2f       	mov	r24, r25
    1646:	88 1f       	adc	r24, r24
    1648:	99 0b       	sbc	r25, r25
    164a:	91 95       	neg	r25
    164c:	80 6a       	ori	r24, 0xA0	; 160
    164e:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1652:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    1656:	88 31       	cpi	r24, 0x18	; 24
    1658:	11 f0       	breq	.+4      	; 0x165e <EEPROM_writeByte+0x46>
        return ERROR; 
    165a:	1c 82       	std	Y+4, r1	; 0x04
    165c:	16 c0       	rjmp	.+44     	; 0x168a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1664:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    1668:	88 32       	cpi	r24, 0x28	; 40
    166a:	11 f0       	breq	.+4      	; 0x1670 <EEPROM_writeByte+0x58>
        return ERROR;
    166c:	1c 82       	std	Y+4, r1	; 0x04
    166e:	0d c0       	rjmp	.+26     	; 0x168a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1676:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    167a:	88 32       	cpi	r24, 0x28	; 40
    167c:	11 f0       	breq	.+4      	; 0x1682 <EEPROM_writeByte+0x6a>
        return ERROR;
    167e:	1c 82       	std	Y+4, r1	; 0x04
    1680:	04 c0       	rjmp	.+8      	; 0x168a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1682:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_stop>
	
    return SUCCESS;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	8c 83       	std	Y+4, r24	; 0x04
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <EEPROM_readByte+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <EEPROM_readByte+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	7c 83       	std	Y+4, r23	; 0x04
    16ae:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16b0:	0e 94 10 12 	call	0x2420	; 0x2420 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16b4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <EEPROM_readByte+0x26>
        return ERROR;
    16bc:	1d 82       	std	Y+5, r1	; 0x05
    16be:	44 c0       	rjmp	.+136    	; 0x1748 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	80 70       	andi	r24, 0x00	; 0
    16c6:	97 70       	andi	r25, 0x07	; 7
    16c8:	88 0f       	add	r24, r24
    16ca:	89 2f       	mov	r24, r25
    16cc:	88 1f       	adc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	91 95       	neg	r25
    16d2:	80 6a       	ori	r24, 0xA0	; 160
    16d4:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16d8:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    16dc:	88 31       	cpi	r24, 0x18	; 24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <EEPROM_readByte+0x4a>
        return ERROR;
    16e0:	1d 82       	std	Y+5, r1	; 0x05
    16e2:	32 c0       	rjmp	.+100    	; 0x1748 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16ea:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    16ee:	88 32       	cpi	r24, 0x28	; 40
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <EEPROM_readByte+0x5c>
        return ERROR;
    16f2:	1d 82       	std	Y+5, r1	; 0x05
    16f4:	29 c0       	rjmp	.+82     	; 0x1748 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    16f6:	0e 94 10 12 	call	0x2420	; 0x2420 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    16fa:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    16fe:	80 31       	cpi	r24, 0x10	; 16
    1700:	11 f0       	breq	.+4      	; 0x1706 <EEPROM_readByte+0x6c>
        return ERROR;
    1702:	1d 82       	std	Y+5, r1	; 0x05
    1704:	21 c0       	rjmp	.+66     	; 0x1748 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	80 70       	andi	r24, 0x00	; 0
    170c:	97 70       	andi	r25, 0x07	; 7
    170e:	88 0f       	add	r24, r24
    1710:	89 2f       	mov	r24, r25
    1712:	88 1f       	adc	r24, r24
    1714:	99 0b       	sbc	r25, r25
    1716:	91 95       	neg	r25
    1718:	81 6a       	ori	r24, 0xA1	; 161
    171a:	0e 94 2b 12 	call	0x2456	; 0x2456 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    171e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    1722:	80 34       	cpi	r24, 0x40	; 64
    1724:	11 f0       	breq	.+4      	; 0x172a <EEPROM_readByte+0x90>
        return ERROR;
    1726:	1d 82       	std	Y+5, r1	; 0x05
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    172a:	0e 94 55 12 	call	0x24aa	; 0x24aa <TWI_readByteWithNACK>
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1734:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_getStatus>
    1738:	88 35       	cpi	r24, 0x58	; 88
    173a:	11 f0       	breq	.+4      	; 0x1740 <EEPROM_readByte+0xa6>
        return ERROR;
    173c:	1d 82       	std	Y+5, r1	; 0x05
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1740:	0e 94 20 12 	call	0x2440	; 0x2440 <TWI_stop>

    return SUCCESS;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <GPIO_setupPinDirection+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_setupPinDirection+0x8>
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	6a 83       	std	Y+2, r22	; 0x02
    176c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 30       	cpi	r24, 0x08	; 8
    1772:	08 f0       	brcs	.+2      	; 0x1776 <GPIO_setupPinDirection+0x1c>
    1774:	d5 c0       	rjmp	.+426    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	08 f0       	brcs	.+2      	; 0x177e <GPIO_setupPinDirection+0x24>
    177c:	d1 c0       	rjmp	.+418    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	3d 83       	std	Y+5, r19	; 0x05
    1786:	2c 83       	std	Y+4, r18	; 0x04
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	9d 81       	ldd	r25, Y+5	; 0x05
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <GPIO_setupPinDirection+0x3a>
    1792:	43 c0       	rjmp	.+134    	; 0x181a <GPIO_setupPinDirection+0xc0>
    1794:	2c 81       	ldd	r18, Y+4	; 0x04
    1796:	3d 81       	ldd	r19, Y+5	; 0x05
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <GPIO_setupPinDirection+0x4e>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	71 f0       	breq	.+28     	; 0x17c2 <GPIO_setupPinDirection+0x68>
    17a6:	bc c0       	rjmp	.+376    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <GPIO_setupPinDirection+0x5a>
    17b2:	5f c0       	rjmp	.+190    	; 0x1872 <GPIO_setupPinDirection+0x118>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <GPIO_setupPinDirection+0x66>
    17be:	85 c0       	rjmp	.+266    	; 0x18ca <GPIO_setupPinDirection+0x170>
    17c0:	af c0       	rjmp	.+350    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17c8:	aa e3       	ldi	r26, 0x3A	; 58
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea e3       	ldi	r30, 0x3A	; 58
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_setupPinDirection+0x8c>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_setupPinDirection+0x88>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	98 c0       	rjmp	.+304    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17f0:	aa e3       	ldi	r26, 0x3A	; 58
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ea e3       	ldi	r30, 0x3A	; 58
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_setupPinDirection+0xb4>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_setupPinDirection+0xb0>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	83 c0       	rjmp	.+262    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1820:	a7 e3       	ldi	r26, 0x37	; 55
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e3       	ldi	r30, 0x37	; 55
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_setupPinDirection+0xe4>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_setupPinDirection+0xe0>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	6c c0       	rjmp	.+216    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1848:	a7 e3       	ldi	r26, 0x37	; 55
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e7 e3       	ldi	r30, 0x37	; 55
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_setupPinDirection+0x10c>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_setupPinDirection+0x108>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	57 c0       	rjmp	.+174    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	a1 f4       	brne	.+40     	; 0x18a0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1878:	a4 e3       	ldi	r26, 0x34	; 52
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e4 e3       	ldi	r30, 0x34	; 52
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_setupPinDirection+0x13c>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_setupPinDirection+0x138>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	40 c0       	rjmp	.+128    	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18a0:	a4 e3       	ldi	r26, 0x34	; 52
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e4 e3       	ldi	r30, 0x34	; 52
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <GPIO_setupPinDirection+0x164>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <GPIO_setupPinDirection+0x160>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	2b c0       	rjmp	.+86     	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	a1 f4       	brne	.+40     	; 0x18f8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18d0:	a1 e3       	ldi	r26, 0x31	; 49
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e1 e3       	ldi	r30, 0x31	; 49
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_setupPinDirection+0x194>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_setupPinDirection+0x190>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18f8:	a1 e3       	ldi	r26, 0x31	; 49
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e1 e3       	ldi	r30, 0x31	; 49
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <GPIO_setupPinDirection+0x1bc>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <GPIO_setupPinDirection+0x1b8>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_writePin+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_writePin+0x8>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
    1942:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	88 30       	cpi	r24, 0x08	; 8
    1948:	08 f0       	brcs	.+2      	; 0x194c <GPIO_writePin+0x1c>
    194a:	d5 c0       	rjmp	.+426    	; 0x1af6 <GPIO_writePin+0x1c6>
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	84 30       	cpi	r24, 0x04	; 4
    1950:	08 f0       	brcs	.+2      	; 0x1954 <GPIO_writePin+0x24>
    1952:	d1 c0       	rjmp	.+418    	; 0x1af6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3d 83       	std	Y+5, r19	; 0x05
    195c:	2c 83       	std	Y+4, r18	; 0x04
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	09 f4       	brne	.+2      	; 0x196a <GPIO_writePin+0x3a>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <GPIO_writePin+0xc0>
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	2c f4       	brge	.+10     	; 0x197e <GPIO_writePin+0x4e>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	71 f0       	breq	.+28     	; 0x1998 <GPIO_writePin+0x68>
    197c:	bc c0       	rjmp	.+376    	; 0x1af6 <GPIO_writePin+0x1c6>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	09 f4       	brne	.+2      	; 0x198a <GPIO_writePin+0x5a>
    1988:	5f c0       	rjmp	.+190    	; 0x1a48 <GPIO_writePin+0x118>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <GPIO_writePin+0x66>
    1994:	85 c0       	rjmp	.+266    	; 0x1aa0 <GPIO_writePin+0x170>
    1996:	af c0       	rjmp	.+350    	; 0x1af6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	a1 f4       	brne	.+40     	; 0x19c6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <GPIO_writePin+0x8c>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <GPIO_writePin+0x88>
    19c0:	84 2b       	or	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	98 c0       	rjmp	.+304    	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19c6:	ab e3       	ldi	r26, 0x3B	; 59
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_writePin+0xb4>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_writePin+0xb0>
    19e8:	80 95       	com	r24
    19ea:	84 23       	and	r24, r20
    19ec:	8c 93       	st	X, r24
    19ee:	83 c0       	rjmp	.+262    	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	a1 f4       	brne	.+40     	; 0x1a1e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <GPIO_writePin+0xe4>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <GPIO_writePin+0xe0>
    1a18:	84 2b       	or	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	6c c0       	rjmp	.+216    	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a1e:	a8 e3       	ldi	r26, 0x38	; 56
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_writePin+0x10c>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_writePin+0x108>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	57 c0       	rjmp	.+174    	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	a1 f4       	brne	.+40     	; 0x1a76 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <GPIO_writePin+0x13c>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <GPIO_writePin+0x138>
    1a70:	84 2b       	or	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	40 c0       	rjmp	.+128    	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a76:	a5 e3       	ldi	r26, 0x35	; 53
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e3       	ldi	r30, 0x35	; 53
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <GPIO_writePin+0x164>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <GPIO_writePin+0x160>
    1a98:	80 95       	com	r24
    1a9a:	84 23       	and	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	2b c0       	rjmp	.+86     	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	a1 f4       	brne	.+40     	; 0x1ace <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1aa6:	a2 e3       	ldi	r26, 0x32	; 50
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e2 e3       	ldi	r30, 0x32	; 50
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <GPIO_writePin+0x194>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <GPIO_writePin+0x190>
    1ac8:	84 2b       	or	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ace:	a2 e3       	ldi	r26, 0x32	; 50
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e2 e3       	ldi	r30, 0x32	; 50
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <GPIO_writePin+0x1bc>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <GPIO_writePin+0x1b8>
    1af0:	80 95       	com	r24
    1af2:	84 23       	and	r24, r20
    1af4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_readPin+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <GPIO_readPin+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
    1b16:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b18:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <GPIO_readPin+0x1c>
    1b20:	84 c0       	rjmp	.+264    	; 0x1c2a <GPIO_readPin+0x124>
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	84 30       	cpi	r24, 0x04	; 4
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <GPIO_readPin+0x24>
    1b28:	80 c0       	rjmp	.+256    	; 0x1c2a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3d 83       	std	Y+5, r19	; 0x05
    1b32:	2c 83       	std	Y+4, r18	; 0x04
    1b34:	4c 81       	ldd	r20, Y+4	; 0x04
    1b36:	5d 81       	ldd	r21, Y+5	; 0x05
    1b38:	41 30       	cpi	r20, 0x01	; 1
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	79 f1       	breq	.+94     	; 0x1b9c <GPIO_readPin+0x96>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	91 05       	cpc	r25, r1
    1b46:	34 f4       	brge	.+12     	; 0x1b54 <GPIO_readPin+0x4e>
    1b48:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4c:	21 15       	cp	r18, r1
    1b4e:	31 05       	cpc	r19, r1
    1b50:	69 f0       	breq	.+26     	; 0x1b6c <GPIO_readPin+0x66>
    1b52:	6b c0       	rjmp	.+214    	; 0x1c2a <GPIO_readPin+0x124>
    1b54:	4c 81       	ldd	r20, Y+4	; 0x04
    1b56:	5d 81       	ldd	r21, Y+5	; 0x05
    1b58:	42 30       	cpi	r20, 0x02	; 2
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	b9 f1       	breq	.+110    	; 0x1bcc <GPIO_readPin+0xc6>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	9d 81       	ldd	r25, Y+5	; 0x05
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	91 05       	cpc	r25, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <GPIO_readPin+0x64>
    1b68:	49 c0       	rjmp	.+146    	; 0x1bfc <GPIO_readPin+0xf6>
    1b6a:	5f c0       	rjmp	.+190    	; 0x1c2a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b6c:	e9 e3       	ldi	r30, 0x39	; 57
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_readPin+0x7e>
    1b80:	55 95       	asr	r21
    1b82:	47 95       	ror	r20
    1b84:	8a 95       	dec	r24
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_readPin+0x7a>
    1b88:	ca 01       	movw	r24, r20
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	88 23       	and	r24, r24
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	49 c0       	rjmp	.+146    	; 0x1c2a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b98:	19 82       	std	Y+1, r1	; 0x01
    1b9a:	47 c0       	rjmp	.+142    	; 0x1c2a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b9c:	e6 e3       	ldi	r30, 0x36	; 54
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a9 01       	movw	r20, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_readPin+0xae>
    1bb0:	55 95       	asr	r21
    1bb2:	47 95       	ror	r20
    1bb4:	8a 95       	dec	r24
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_readPin+0xaa>
    1bb8:	ca 01       	movw	r24, r20
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	31 c0       	rjmp	.+98     	; 0x1c2a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	2f c0       	rjmp	.+94     	; 0x1c2a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bcc:	e3 e3       	ldi	r30, 0x33	; 51
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_readPin+0xde>
    1be0:	55 95       	asr	r21
    1be2:	47 95       	ror	r20
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_readPin+0xda>
    1be8:	ca 01       	movw	r24, r20
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	90 70       	andi	r25, 0x00	; 0
    1bee:	88 23       	and	r24, r24
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	19 c0       	rjmp	.+50     	; 0x1c2a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	17 c0       	rjmp	.+46     	; 0x1c2a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1bfc:	e0 e3       	ldi	r30, 0x30	; 48
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <GPIO_readPin+0x10e>
    1c10:	55 95       	asr	r21
    1c12:	47 95       	ror	r20
    1c14:	8a 95       	dec	r24
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <GPIO_readPin+0x10a>
    1c18:	ca 01       	movw	r24, r20
    1c1a:	81 70       	andi	r24, 0x01	; 1
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	88 23       	and	r24, r24
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c28:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <GPIO_setupPortDirection+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <GPIO_setupPortDirection+0x8>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	84 30       	cpi	r24, 0x04	; 4
    1c50:	90 f5       	brcc	.+100    	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3c 83       	std	Y+4, r19	; 0x04
    1c5a:	2b 83       	std	Y+3, r18	; 0x03
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 05       	cpc	r25, r1
    1c64:	d1 f0       	breq	.+52     	; 0x1c9a <GPIO_setupPortDirection+0x5e>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <GPIO_setupPortDirection+0x3e>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <GPIO_setupPortDirection+0x54>
    1c78:	1e c0       	rjmp	.+60     	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
    1c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	81 f0       	breq	.+32     	; 0x1ca4 <GPIO_setupPortDirection+0x68>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <GPIO_setupPortDirection+0x72>
    1c8e:	13 c0       	rjmp	.+38     	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c90:	ea e3       	ldi	r30, 0x3A	; 58
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	80 83       	st	Z, r24
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c9a:	e7 e3       	ldi	r30, 0x37	; 55
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 83       	st	Z, r24
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ca4:	e4 e3       	ldi	r30, 0x34	; 52
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 83       	st	Z, r24
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cae:	e1 e3       	ldi	r30, 0x31	; 49
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <GPIO_writePort+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <GPIO_writePort+0x8>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	84 30       	cpi	r24, 0x04	; 4
    1cd8:	90 f5       	brcc	.+100    	; 0x1d3e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3c 83       	std	Y+4, r19	; 0x04
    1ce2:	2b 83       	std	Y+3, r18	; 0x03
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	d1 f0       	breq	.+52     	; 0x1d22 <GPIO_writePort+0x5e>
    1cee:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <GPIO_writePort+0x3e>
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <GPIO_writePort+0x54>
    1d00:	1e c0       	rjmp	.+60     	; 0x1d3e <GPIO_writePort+0x7a>
    1d02:	2b 81       	ldd	r18, Y+3	; 0x03
    1d04:	3c 81       	ldd	r19, Y+4	; 0x04
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	81 f0       	breq	.+32     	; 0x1d2c <GPIO_writePort+0x68>
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <GPIO_writePort+0x72>
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d18:	eb e3       	ldi	r30, 0x3B	; 59
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 83       	st	Z, r24
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d22:	e8 e3       	ldi	r30, 0x38	; 56
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 83       	st	Z, r24
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d2c:	e5 e3       	ldi	r30, 0x35	; 53
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	80 83       	st	Z, r24
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d36:	e2 e3       	ldi	r30, 0x32	; 50
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <GPIO_readPort+0x6>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <GPIO_readPort+0x8>
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d5a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	84 30       	cpi	r24, 0x04	; 4
    1d60:	90 f5       	brcc	.+100    	; 0x1dc6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3c 83       	std	Y+4, r19	; 0x04
    1d6a:	2b 83       	std	Y+3, r18	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	91 05       	cpc	r25, r1
    1d74:	d1 f0       	breq	.+52     	; 0x1daa <GPIO_readPort+0x5e>
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <GPIO_readPort+0x3e>
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	61 f0       	breq	.+24     	; 0x1da0 <GPIO_readPort+0x54>
    1d88:	1e c0       	rjmp	.+60     	; 0x1dc6 <GPIO_readPort+0x7a>
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	31 05       	cpc	r19, r1
    1d92:	81 f0       	breq	.+32     	; 0x1db4 <GPIO_readPort+0x68>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	83 30       	cpi	r24, 0x03	; 3
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	81 f0       	breq	.+32     	; 0x1dbe <GPIO_readPort+0x72>
    1d9e:	13 c0       	rjmp	.+38     	; 0x1dc6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1da0:	e9 e3       	ldi	r30, 0x39	; 57
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	0e c0       	rjmp	.+28     	; 0x1dc6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1daa:	e6 e3       	ldi	r30, 0x36	; 54
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1db4:	e3 e3       	ldi	r30, 0x33	; 51
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dbe:	e0 e3       	ldi	r30, 0x30	; 48
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <PIR_init>:
 *
 *  Created on: Nov 4, 2024
 *      Author: hassa
 */
#include"pir.h"
void PIR_init(void) {
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    // Set the PIR_PIN as input
    PIR_DDR &= ~(1 << PIR_PIN);  // Clear the corresponding bit to configure as input
    1dde:	a4 e3       	ldi	r26, 0x34	; 52
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e4 e3       	ldi	r30, 0x34	; 52
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8b 7f       	andi	r24, 0xFB	; 251
    1dea:	8c 93       	st	X, r24
    PIR_PORT |= (1 << PIR_PIN);  // Enable pull-up resistor (optional depending on sensor type)
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	84 60       	ori	r24, 0x04	; 4
    1df8:	8c 93       	st	X, r24
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <PIR_getState>:

// Function to return PIR State
uint8_t PIR_getState(void)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    // Read the state of the PIR_PIN
    return (PIR_INPUT & (1 << PIR_PIN)) ? 1 : 0; // Returns 1 if HIGH (motion detected), 0 if LOW (no motion)
    1e0a:	e3 e3       	ldi	r30, 0x33	; 51
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	84 70       	andi	r24, 0x04	; 4
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	11 f0       	breq	.+4      	; 0x1e22 <PIR_getState+0x22>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <PWM_Timer0_Start>:
 *      Author: hassan
 */
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01

	TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS00)|(1<<CS02);
    1e38:	a3 e5       	ldi	r26, 0x53	; 83
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e3 e5       	ldi	r30, 0x53	; 83
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8d 66       	ori	r24, 0x6D	; 109
    1e44:	8c 93       	st	X, r24
	DDRB|=(1<<PB3);
    1e46:	a7 e3       	ldi	r26, 0x37	; 55
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e7 e3       	ldi	r30, 0x37	; 55
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 60       	ori	r24, 0x08	; 8
    1e52:	8c 93       	st	X, r24
	OCR0=(duty_cycle*255)/100;
    1e54:	ec e5       	ldi	r30, 0x5C	; 92
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	ca 01       	movw	r24, r20
    1e60:	9c 01       	movw	r18, r24
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	c9 01       	movw	r24, r18
    1e68:	96 95       	lsr	r25
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	88 27       	eor	r24, r24
    1e6e:	97 95       	ror	r25
    1e70:	87 95       	ror	r24
    1e72:	82 1b       	sub	r24, r18
    1e74:	93 0b       	sbc	r25, r19
    1e76:	84 0f       	add	r24, r20
    1e78:	95 1f       	adc	r25, r21
    1e7a:	24 e6       	ldi	r18, 0x64	; 100
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	b9 01       	movw	r22, r18
    1e80:	0e 94 8a 13 	call	0x2714	; 0x2714 <__divmodhi4>
    1e84:	cb 01       	movw	r24, r22
    1e86:	80 83       	st	Z, r24
	TIMSK|=(1<<OCIE0);
    1e88:	a9 e5       	ldi	r26, 0x59	; 89
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e9 e5       	ldi	r30, 0x59	; 89
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	82 60       	ori	r24, 0x02	; 2
    1e94:	8c 93       	st	X, r24
}
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1e9e:	1f 92       	push	r1
    1ea0:	0f 92       	push	r0
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	0f 92       	push	r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	2f 93       	push	r18
    1eaa:	3f 93       	push	r19
    1eac:	4f 93       	push	r20
    1eae:	5f 93       	push	r21
    1eb0:	6f 93       	push	r22
    1eb2:	7f 93       	push	r23
    1eb4:	8f 93       	push	r24
    1eb6:	9f 93       	push	r25
    1eb8:	af 93       	push	r26
    1eba:	bf 93       	push	r27
    1ebc:	ef 93       	push	r30
    1ebe:	ff 93       	push	r31
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER0 != NULL_PTR)
    1ec8:	80 91 7f 00 	lds	r24, 0x007F
    1ecc:	90 91 80 00 	lds	r25, 0x0080
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ed4:	e0 91 7f 00 	lds	r30, 0x007F
    1ed8:	f0 91 80 00 	lds	r31, 0x0080
    1edc:	09 95       	icall
	}
}
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	ff 91       	pop	r31
    1ee4:	ef 91       	pop	r30
    1ee6:	bf 91       	pop	r27
    1ee8:	af 91       	pop	r26
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	7f 91       	pop	r23
    1ef0:	6f 91       	pop	r22
    1ef2:	5f 91       	pop	r21
    1ef4:	4f 91       	pop	r20
    1ef6:	3f 91       	pop	r19
    1ef8:	2f 91       	pop	r18
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	0f 90       	pop	r0
    1f00:	1f 90       	pop	r1
    1f02:	18 95       	reti

00001f04 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1f04:	1f 92       	push	r1
    1f06:	0f 92       	push	r0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	0f 92       	push	r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	2f 93       	push	r18
    1f10:	3f 93       	push	r19
    1f12:	4f 93       	push	r20
    1f14:	5f 93       	push	r21
    1f16:	6f 93       	push	r22
    1f18:	7f 93       	push	r23
    1f1a:	8f 93       	push	r24
    1f1c:	9f 93       	push	r25
    1f1e:	af 93       	push	r26
    1f20:	bf 93       	push	r27
    1f22:	ef 93       	push	r30
    1f24:	ff 93       	push	r31
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER0 != NULL_PTR)
    1f2e:	80 91 7f 00 	lds	r24, 0x007F
    1f32:	90 91 80 00 	lds	r25, 0x0080
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f3a:	e0 91 7f 00 	lds	r30, 0x007F
    1f3e:	f0 91 80 00 	lds	r31, 0x0080
    1f42:	09 95       	icall
	}
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	ff 91       	pop	r31
    1f4a:	ef 91       	pop	r30
    1f4c:	bf 91       	pop	r27
    1f4e:	af 91       	pop	r26
    1f50:	9f 91       	pop	r25
    1f52:	8f 91       	pop	r24
    1f54:	7f 91       	pop	r23
    1f56:	6f 91       	pop	r22
    1f58:	5f 91       	pop	r21
    1f5a:	4f 91       	pop	r20
    1f5c:	3f 91       	pop	r19
    1f5e:	2f 91       	pop	r18
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	11 24       	eor	r1, r1
    1f74:	2f 93       	push	r18
    1f76:	3f 93       	push	r19
    1f78:	4f 93       	push	r20
    1f7a:	5f 93       	push	r21
    1f7c:	6f 93       	push	r22
    1f7e:	7f 93       	push	r23
    1f80:	8f 93       	push	r24
    1f82:	9f 93       	push	r25
    1f84:	af 93       	push	r26
    1f86:	bf 93       	push	r27
    1f88:	ef 93       	push	r30
    1f8a:	ff 93       	push	r31
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER1 != NULL_PTR)
    1f94:	80 91 81 00 	lds	r24, 0x0081
    1f98:	90 91 82 00 	lds	r25, 0x0082
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	29 f0       	breq	.+10     	; 0x1faa <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1fa0:	e0 91 81 00 	lds	r30, 0x0081
    1fa4:	f0 91 82 00 	lds	r31, 0x0082
    1fa8:	09 95       	icall
	}
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	bf 91       	pop	r27
    1fb4:	af 91       	pop	r26
    1fb6:	9f 91       	pop	r25
    1fb8:	8f 91       	pop	r24
    1fba:	7f 91       	pop	r23
    1fbc:	6f 91       	pop	r22
    1fbe:	5f 91       	pop	r21
    1fc0:	4f 91       	pop	r20
    1fc2:	3f 91       	pop	r19
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	0f 90       	pop	r0
    1fcc:	1f 90       	pop	r1
    1fce:	18 95       	reti

00001fd0 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	0f 92       	push	r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	2f 93       	push	r18
    1fdc:	3f 93       	push	r19
    1fde:	4f 93       	push	r20
    1fe0:	5f 93       	push	r21
    1fe2:	6f 93       	push	r22
    1fe4:	7f 93       	push	r23
    1fe6:	8f 93       	push	r24
    1fe8:	9f 93       	push	r25
    1fea:	af 93       	push	r26
    1fec:	bf 93       	push	r27
    1fee:	ef 93       	push	r30
    1ff0:	ff 93       	push	r31
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER1 != NULL_PTR)
    1ffa:	80 91 81 00 	lds	r24, 0x0081
    1ffe:	90 91 82 00 	lds	r25, 0x0082
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	29 f0       	breq	.+10     	; 0x2010 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2006:	e0 91 81 00 	lds	r30, 0x0081
    200a:	f0 91 82 00 	lds	r31, 0x0082
    200e:	09 95       	icall
	}
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	ff 91       	pop	r31
    2016:	ef 91       	pop	r30
    2018:	bf 91       	pop	r27
    201a:	af 91       	pop	r26
    201c:	9f 91       	pop	r25
    201e:	8f 91       	pop	r24
    2020:	7f 91       	pop	r23
    2022:	6f 91       	pop	r22
    2024:	5f 91       	pop	r21
    2026:	4f 91       	pop	r20
    2028:	3f 91       	pop	r19
    202a:	2f 91       	pop	r18
    202c:	0f 90       	pop	r0
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	0f 90       	pop	r0
    2032:	1f 90       	pop	r1
    2034:	18 95       	reti

00002036 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    2036:	1f 92       	push	r1
    2038:	0f 92       	push	r0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	0f 92       	push	r0
    203e:	11 24       	eor	r1, r1
    2040:	2f 93       	push	r18
    2042:	3f 93       	push	r19
    2044:	4f 93       	push	r20
    2046:	5f 93       	push	r21
    2048:	6f 93       	push	r22
    204a:	7f 93       	push	r23
    204c:	8f 93       	push	r24
    204e:	9f 93       	push	r25
    2050:	af 93       	push	r26
    2052:	bf 93       	push	r27
    2054:	ef 93       	push	r30
    2056:	ff 93       	push	r31
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER2 != NULL_PTR)
    2060:	80 91 83 00 	lds	r24, 0x0083
    2064:	90 91 84 00 	lds	r25, 0x0084
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	29 f0       	breq	.+10     	; 0x2076 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    206c:	e0 91 83 00 	lds	r30, 0x0083
    2070:	f0 91 84 00 	lds	r31, 0x0084
    2074:	09 95       	icall
	}
}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	ff 91       	pop	r31
    207c:	ef 91       	pop	r30
    207e:	bf 91       	pop	r27
    2080:	af 91       	pop	r26
    2082:	9f 91       	pop	r25
    2084:	8f 91       	pop	r24
    2086:	7f 91       	pop	r23
    2088:	6f 91       	pop	r22
    208a:	5f 91       	pop	r21
    208c:	4f 91       	pop	r20
    208e:	3f 91       	pop	r19
    2090:	2f 91       	pop	r18
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	0f 90       	pop	r0
    2098:	1f 90       	pop	r1
    209a:	18 95       	reti

0000209c <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    209c:	1f 92       	push	r1
    209e:	0f 92       	push	r0
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	0f 92       	push	r0
    20a4:	11 24       	eor	r1, r1
    20a6:	2f 93       	push	r18
    20a8:	3f 93       	push	r19
    20aa:	4f 93       	push	r20
    20ac:	5f 93       	push	r21
    20ae:	6f 93       	push	r22
    20b0:	7f 93       	push	r23
    20b2:	8f 93       	push	r24
    20b4:	9f 93       	push	r25
    20b6:	af 93       	push	r26
    20b8:	bf 93       	push	r27
    20ba:	ef 93       	push	r30
    20bc:	ff 93       	push	r31
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_TIMER2 != NULL_PTR)
    20c6:	80 91 83 00 	lds	r24, 0x0083
    20ca:	90 91 84 00 	lds	r25, 0x0084
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	29 f0       	breq	.+10     	; 0x20dc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_TIMER2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    20d2:	e0 91 83 00 	lds	r30, 0x0083
    20d6:	f0 91 84 00 	lds	r31, 0x0084
    20da:	09 95       	icall
	}
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	ff 91       	pop	r31
    20e2:	ef 91       	pop	r30
    20e4:	bf 91       	pop	r27
    20e6:	af 91       	pop	r26
    20e8:	9f 91       	pop	r25
    20ea:	8f 91       	pop	r24
    20ec:	7f 91       	pop	r23
    20ee:	6f 91       	pop	r22
    20f0:	5f 91       	pop	r21
    20f2:	4f 91       	pop	r20
    20f4:	3f 91       	pop	r19
    20f6:	2f 91       	pop	r18
    20f8:	0f 90       	pop	r0
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	0f 90       	pop	r0
    20fe:	1f 90       	pop	r1
    2100:	18 95       	reti

00002102 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <Timer_init+0x6>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_ID==TIMER0_ID)
    2110:	e9 81       	ldd	r30, Y+1	; 0x01
    2112:	fa 81       	ldd	r31, Y+2	; 0x02
    2114:	84 81       	ldd	r24, Z+4	; 0x04
    2116:	88 23       	and	r24, r24
    2118:	e9 f5       	brne	.+122    	; 0x2194 <Timer_init+0x92>
	{
		TCNT0 = Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    211a:	a2 e5       	ldi	r26, 0x52	; 82
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    2128:	ac e5       	ldi	r26, 0x5C	; 92
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	8c 93       	st	X, r24
		 * 1. Non_pwm mode FOC0=1
		 * 2. WGM00 = 0 , WGM01=1 for ctc and 0 for normal
		 * 3. OC0 DISABLED
		 * 4. clock = Configurable
		 */
		TCCR0 |= (1<<FOC0)|(Config_Ptr->timer_mode<<WGM01)|(Config_Ptr->timer_clock<<CS00);
    2136:	a3 e5       	ldi	r26, 0x53	; 83
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e3 e5       	ldi	r30, 0x53	; 83
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	86 81       	ldd	r24, Z+6	; 0x06
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	98 2f       	mov	r25, r24
    215a:	90 68       	ori	r25, 0x80	; 128
    215c:	e9 81       	ldd	r30, Y+1	; 0x01
    215e:	fa 81       	ldd	r31, Y+2	; 0x02
    2160:	85 81       	ldd	r24, Z+5	; 0x05
    2162:	89 2b       	or	r24, r25
    2164:	82 2b       	or	r24, r18
    2166:	8c 93       	st	X, r24
		/*enable interrupt*/
		TIMSK |=(1<<(Config_Ptr->timer_mode));
    2168:	a9 e5       	ldi	r26, 0x59	; 89
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e9 e5       	ldi	r30, 0x59	; 89
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <Timer_init+0x88>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <Timer_init+0x84>
    218e:	84 2b       	or	r24, r20
    2190:	8c 93       	st	X, r24
    2192:	97 c0       	rjmp	.+302    	; 0x22c2 <Timer_init+0x1c0>
	}
	else if(Config_Ptr->timer_ID==TIMER1_ID)
    2194:	e9 81       	ldd	r30, Y+1	; 0x01
    2196:	fa 81       	ldd	r31, Y+2	; 0x02
    2198:	84 81       	ldd	r24, Z+4	; 0x04
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	09 f0       	breq	.+2      	; 0x21a0 <Timer_init+0x9e>
    219e:	4c c0       	rjmp	.+152    	; 0x2238 <Timer_init+0x136>
	{
		TCNT1 = Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    21a0:	ac e4       	ldi	r26, 0x4C	; 76
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	11 96       	adiw	r26, 0x01	; 1
    21ae:	9c 93       	st	X, r25
    21b0:	8e 93       	st	-X, r24
		OCR1A  =Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    21b2:	aa e4       	ldi	r26, 0x4A	; 74
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e9 81       	ldd	r30, Y+1	; 0x01
    21b8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	11 96       	adiw	r26, 0x01	; 1
    21c0:	9c 93       	st	X, r25
    21c2:	8e 93       	st	-X, r24
		 * 1. Non_pwm mode FOC1B=1
		 * 2. WGM10,WGM11,WGM13=0 & WGM12=1 for ctc and 0 for normal
		 * 3. OC DISABLED
		 * 4. clock = Configurable
		 */
		TCCR1A |= (1<<FOC1A) ;
    21c4:	af e4       	ldi	r26, 0x4F	; 79
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ef e4       	ldi	r30, 0x4F	; 79
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	88 60       	ori	r24, 0x08	; 8
    21d0:	8c 93       	st	X, r24
		TCCR1B |= (Config_Ptr->timer_mode<<WGM12)|(Config_Ptr->timer_clock<<CS10);
    21d2:	ae e4       	ldi	r26, 0x4E	; 78
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ee e4       	ldi	r30, 0x4E	; 78
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	28 2f       	mov	r18, r24
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	86 81       	ldd	r24, Z+6	; 0x06
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	98 2f       	mov	r25, r24
    21f6:	e9 81       	ldd	r30, Y+1	; 0x01
    21f8:	fa 81       	ldd	r31, Y+2	; 0x02
    21fa:	85 81       	ldd	r24, Z+5	; 0x05
    21fc:	89 2b       	or	r24, r25
    21fe:	82 2b       	or	r24, r18
    2200:	8c 93       	st	X, r24
		/*enable interrupt*/
		if (Config_Ptr->timer_mode == NORMAL_MODE)
    2202:	e9 81       	ldd	r30, Y+1	; 0x01
    2204:	fa 81       	ldd	r31, Y+2	; 0x02
    2206:	86 81       	ldd	r24, Z+6	; 0x06
    2208:	88 23       	and	r24, r24
    220a:	41 f4       	brne	.+16     	; 0x221c <Timer_init+0x11a>
		{
			TIMSK |= (1 << TOIE1);
    220c:	a9 e5       	ldi	r26, 0x59	; 89
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 e5       	ldi	r30, 0x59	; 89
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	84 60       	ori	r24, 0x04	; 4
    2218:	8c 93       	st	X, r24
    221a:	53 c0       	rjmp	.+166    	; 0x22c2 <Timer_init+0x1c0>
		}
		else if (Config_Ptr->timer_mode == CTC_MODE)
    221c:	e9 81       	ldd	r30, Y+1	; 0x01
    221e:	fa 81       	ldd	r31, Y+2	; 0x02
    2220:	86 81       	ldd	r24, Z+6	; 0x06
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	09 f0       	breq	.+2      	; 0x2228 <Timer_init+0x126>
    2226:	4d c0       	rjmp	.+154    	; 0x22c2 <Timer_init+0x1c0>
		{
			TIMSK |= (1 << OCIE1A);
    2228:	a9 e5       	ldi	r26, 0x59	; 89
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e9 e5       	ldi	r30, 0x59	; 89
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 61       	ori	r24, 0x10	; 16
    2234:	8c 93       	st	X, r24
    2236:	45 c0       	rjmp	.+138    	; 0x22c2 <Timer_init+0x1c0>
		}

	}
	else if(Config_Ptr->timer_ID==TIMER2_ID)
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	84 81       	ldd	r24, Z+4	; 0x04
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	09 f0       	breq	.+2      	; 0x2244 <Timer_init+0x142>
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <Timer_init+0x1c0>
	{
		TCNT2= Config_Ptr->timer_InitialValue ; /* Set Timer Initial Value */
    2244:	a4 e4       	ldi	r26, 0x44	; 68
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e9 81       	ldd	r30, Y+1	; 0x01
    224a:	fa 81       	ldd	r31, Y+2	; 0x02
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	8c 93       	st	X, r24
		OCR2  =Config_Ptr->timer_compare_MatchValue;  /* Set Compare value */
    2252:	a3 e4       	ldi	r26, 0x43	; 67
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	8c 93       	st	X, r24
		 * 1. Non_pwm mode FOC2=1
		 * 2. WGM20 = 0 , WGM21=1 for ctc and 0 for normal
		 * 3. OC2 DISABLED
		 * 4. clock = Configurable
		 */
		TCCR2 |= (1<<FOC2)|(Config_Ptr->timer_mode<<WGM21)|(Config_Ptr->timer_clock<<CS20);
    2260:	a5 e4       	ldi	r26, 0x45	; 69
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e5 e4       	ldi	r30, 0x45	; 69
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	e9 81       	ldd	r30, Y+1	; 0x01
    226e:	fa 81       	ldd	r31, Y+2	; 0x02
    2270:	86 81       	ldd	r24, Z+6	; 0x06
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	98 2f       	mov	r25, r24
    2284:	90 68       	ori	r25, 0x80	; 128
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	85 81       	ldd	r24, Z+5	; 0x05
    228c:	89 2b       	or	r24, r25
    228e:	82 2b       	or	r24, r18
    2290:	8c 93       	st	X, r24
		/*enable interrupt*/
		TIMSK |=(1<<(TOIE2+(Config_Ptr->timer_mode)));
    2292:	a9 e5       	ldi	r26, 0x59	; 89
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e9 e5       	ldi	r30, 0x59	; 89
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	86 81       	ldd	r24, Z+6	; 0x06
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 01       	movw	r18, r24
    22aa:	2a 5f       	subi	r18, 0xFA	; 250
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <Timer_init+0x1b8>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <Timer_init+0x1b4>
    22be:	84 2b       	or	r24, r20
    22c0:	8c 93       	st	X, r24
	}
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type==TIMER0_ID)
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	88 23       	and	r24, r24
    22dc:	c1 f4       	brne	.+48     	; 0x230e <Timer_deInit+0x42>
	{
		// Stop the timer by setting the prescaler to 0
		TCCR0 = 0;
    22de:	e3 e5       	ldi	r30, 0x53	; 83
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	10 82       	st	Z, r1
		// Disable Timer0 interrupts
		TIMSK &= ~(1 << TOIE0);
    22e4:	a9 e5       	ldi	r26, 0x59	; 89
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e9 e5       	ldi	r30, 0x59	; 89
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8e 7f       	andi	r24, 0xFE	; 254
    22f0:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE0);
    22f2:	a9 e5       	ldi	r26, 0x59	; 89
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e9 e5       	ldi	r30, 0x59	; 89
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8d 7f       	andi	r24, 0xFD	; 253
    22fe:	8c 93       	st	X, r24
		//clear the counter register
		TCNT0 = 0 ;
    2300:	e2 e5       	ldi	r30, 0x52	; 82
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	10 82       	st	Z, r1
		OCR0  = 0 ;
    2306:	ec e5       	ldi	r30, 0x5C	; 92
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	10 82       	st	Z, r1
    230c:	3a c0       	rjmp	.+116    	; 0x2382 <Timer_deInit+0xb6>
	}
	else if(timer_type==TIMER1_ID)
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	e9 f4       	brne	.+58     	; 0x234e <Timer_deInit+0x82>
	{
		// Stop the timer
		TCCR1A = 0;
    2314:	ef e4       	ldi	r30, 0x4F	; 79
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
		TCCR1B = 0;
    231a:	ee e4       	ldi	r30, 0x4E	; 78
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
		// Disable Timer1 interrupts
		TIMSK &= ~(1 << TOIE1);
    2320:	a9 e5       	ldi	r26, 0x59	; 89
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e9 e5       	ldi	r30, 0x59	; 89
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8b 7f       	andi	r24, 0xFB	; 251
    232c:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE1B);
    232e:	a9 e5       	ldi	r26, 0x59	; 89
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e9 e5       	ldi	r30, 0x59	; 89
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	87 7f       	andi	r24, 0xF7	; 247
    233a:	8c 93       	st	X, r24
		// Clear registers
		TCNT1 = 0;
    233c:	ec e4       	ldi	r30, 0x4C	; 76
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	11 82       	std	Z+1, r1	; 0x01
    2342:	10 82       	st	Z, r1
		OCR1A = 0;
    2344:	ea e4       	ldi	r30, 0x4A	; 74
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	11 82       	std	Z+1, r1	; 0x01
    234a:	10 82       	st	Z, r1
    234c:	1a c0       	rjmp	.+52     	; 0x2382 <Timer_deInit+0xb6>
	}
	else if(timer_type==TIMER2_ID)
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	b9 f4       	brne	.+46     	; 0x2382 <Timer_deInit+0xb6>
	{
		// Stop the timer
		TCCR2 = 0;
    2354:	e5 e4       	ldi	r30, 0x45	; 69
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	10 82       	st	Z, r1
		// Disable Timer2 interrupts
		TIMSK &= ~(1 << TOIE2);
    235a:	a9 e5       	ldi	r26, 0x59	; 89
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e9 e5       	ldi	r30, 0x59	; 89
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	8f 7b       	andi	r24, 0xBF	; 191
    2366:	8c 93       	st	X, r24
		TIMSK &= ~(1 << OCIE2);
    2368:	a9 e5       	ldi	r26, 0x59	; 89
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e9 e5       	ldi	r30, 0x59	; 89
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	8f 77       	andi	r24, 0x7F	; 127
    2374:	8c 93       	st	X, r24
		// Clear registers
		TCNT2 = 0;
    2376:	e4 e4       	ldi	r30, 0x44	; 68
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	10 82       	st	Z, r1
		OCR2 = 0;
    237c:	e3 e4       	ldi	r30, 0x43	; 67
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	10 82       	st	Z, r1
	}
}
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <Timer_setCallBack+0x6>
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID==TIMER0_ID)
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	88 23       	and	r24, r24
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <Timer_setCallBack+0x26>
	{
		g_callBackPtr_TIMER0 = a_ptr;
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	90 93 80 00 	sts	0x0080, r25
    23aa:	80 93 7f 00 	sts	0x007F, r24
    23ae:	13 c0       	rjmp	.+38     	; 0x23d6 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER1_ID)
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <Timer_setCallBack+0x3a>
	{
		g_callBackPtr_TIMER1 = a_ptr;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	90 93 82 00 	sts	0x0082, r25
    23be:	80 93 81 00 	sts	0x0081, r24
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID==TIMER2_ID)
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	31 f4       	brne	.+12     	; 0x23d6 <Timer_setCallBack+0x4c>
	{
		g_callBackPtr_TIMER2 = a_ptr;
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	90 93 84 00 	sts	0x0084, r25
    23d2:	80 93 83 00 	sts	0x0083, r24
	}
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <TWI_init+0x6>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: set using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    23f0:	a0 e2       	ldi	r26, 0x20	; 32
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e9 81       	ldd	r30, Y+1	; 0x01
    23f6:	fa 81       	ldd	r31, Y+2	; 0x02
    23f8:	81 81       	ldd	r24, Z+1	; 0x01
    23fa:	8c 93       	st	X, r24
	TWSR = 0x00;
    23fc:	e1 e2       	ldi	r30, 0x21	; 33
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	10 82       	st	Z, r1

    TWAR = Config_Ptr->address;
    2402:	a2 e2       	ldi	r26, 0x22	; 34
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e9 81       	ldd	r30, Y+1	; 0x01
    2408:	fa 81       	ldd	r31, Y+2	; 0x02
    240a:	80 81       	ld	r24, Z
    240c:	8c 93       	st	X, r24
    /* enable TWI */
    TWCR = (1<<TWEN);
    240e:	e6 e5       	ldi	r30, 0x56	; 86
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	84 e0       	ldi	r24, 0x04	; 4
    2414:	80 83       	st	Z, r24
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <TWI_start>:

void TWI_start(void)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2428:	e6 e5       	ldi	r30, 0x56	; 86
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	84 ea       	ldi	r24, 0xA4	; 164
    242e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2430:	e6 e5       	ldi	r30, 0x56	; 86
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	88 23       	and	r24, r24
    2438:	dc f7       	brge	.-10     	; 0x2430 <TWI_start+0x10>
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <TWI_stop>:

void TWI_stop(void)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2448:	e6 e5       	ldi	r30, 0x56	; 86
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	84 e9       	ldi	r24, 0x94	; 148
    244e:	80 83       	st	Z, r24
}
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2462:	e3 e2       	ldi	r30, 0x23	; 35
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    246a:	e6 e5       	ldi	r30, 0x56	; 86
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	84 e8       	ldi	r24, 0x84	; 132
    2470:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2472:	e6 e5       	ldi	r30, 0x56	; 86
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	88 23       	and	r24, r24
    247a:	dc f7       	brge	.-10     	; 0x2472 <TWI_writeByte+0x1c>
}
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    248c:	e6 e5       	ldi	r30, 0x56	; 86
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	84 ec       	ldi	r24, 0xC4	; 196
    2492:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2494:	e6 e5       	ldi	r30, 0x56	; 86
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	dc f7       	brge	.-10     	; 0x2494 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    249e:	e3 e2       	ldi	r30, 0x23	; 35
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    24b2:	e6 e5       	ldi	r30, 0x56	; 86
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	84 e8       	ldi	r24, 0x84	; 132
    24b8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    24ba:	e6 e5       	ldi	r30, 0x56	; 86
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	dc f7       	brge	.-10     	; 0x24ba <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    24c4:	e3 e2       	ldi	r30, 0x23	; 35
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
}
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    24da:	e1 e2       	ldi	r30, 0x21	; 33
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	88 7f       	andi	r24, 0xF8	; 248
    24e2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <UART_init+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <UART_init+0x8>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    24fe:	1a 82       	std	Y+2, r1	; 0x02
    2500:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2502:	eb e2       	ldi	r30, 0x2B	; 43
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    250a:	ea e2       	ldi	r30, 0x2A	; 42
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	88 e1       	ldi	r24, 0x18	; 24
    2510:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2512:	e0 e4       	ldi	r30, 0x40	; 64
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 e8       	ldi	r24, 0x80	; 128
    2518:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    251a:	a0 e4       	ldi	r26, 0x40	; 64
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e0 e4       	ldi	r30, 0x40	; 64
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	28 2f       	mov	r18, r24
    2526:	29 7f       	andi	r18, 0xF9	; 249
    2528:	eb 81       	ldd	r30, Y+3	; 0x03
    252a:	fc 81       	ldd	r31, Y+4	; 0x04
    252c:	80 81       	ld	r24, Z
    252e:	88 2f       	mov	r24, r24
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 2b       	or	r24, r18
    2538:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    253a:	a0 e4       	ldi	r26, 0x40	; 64
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e0 e4       	ldi	r30, 0x40	; 64
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	28 2f       	mov	r18, r24
    2546:	2f 7c       	andi	r18, 0xCF	; 207
    2548:	eb 81       	ldd	r30, Y+3	; 0x03
    254a:	fc 81       	ldd	r31, Y+4	; 0x04
    254c:	81 81       	ldd	r24, Z+1	; 0x01
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	82 95       	swap	r24
    2554:	92 95       	swap	r25
    2556:	90 7f       	andi	r25, 0xF0	; 240
    2558:	98 27       	eor	r25, r24
    255a:	80 7f       	andi	r24, 0xF0	; 240
    255c:	98 27       	eor	r25, r24
    255e:	82 2b       	or	r24, r18
    2560:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    2562:	a0 e4       	ldi	r26, 0x40	; 64
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e0 e4       	ldi	r30, 0x40	; 64
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	28 2f       	mov	r18, r24
    256e:	27 7f       	andi	r18, 0xF7	; 247
    2570:	eb 81       	ldd	r30, Y+3	; 0x03
    2572:	fc 81       	ldd	r31, Y+4	; 0x04
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	82 2b       	or	r24, r18
    2588:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    258a:	eb 81       	ldd	r30, Y+3	; 0x03
    258c:	fc 81       	ldd	r31, Y+4	; 0x04
    258e:	83 81       	ldd	r24, Z+3	; 0x03
    2590:	94 81       	ldd	r25, Z+4	; 0x04
    2592:	a5 81       	ldd	r26, Z+5	; 0x05
    2594:	b6 81       	ldd	r27, Z+6	; 0x06
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	aa 1f       	adc	r26, r26
    25a4:	bb 1f       	adc	r27, r27
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	aa 1f       	adc	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	9c 01       	movw	r18, r24
    25b0:	ad 01       	movw	r20, r26
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	92 e1       	ldi	r25, 0x12	; 18
    25b6:	aa e7       	ldi	r26, 0x7A	; 122
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 9d 13 	call	0x273a	; 0x273a <__udivmodsi4>
    25c2:	da 01       	movw	r26, r20
    25c4:	c9 01       	movw	r24, r18
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    25cc:	e0 e4       	ldi	r30, 0x40	; 64
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	89 2f       	mov	r24, r25
    25d6:	99 27       	eor	r25, r25
    25d8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    25da:	e9 e2       	ldi	r30, 0x29	; 41
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	80 83       	st	Z, r24
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	0f 92       	push	r0
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    25fc:	eb e2       	ldi	r30, 0x2B	; 43
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	80 72       	andi	r24, 0x20	; 32
    2608:	90 70       	andi	r25, 0x00	; 0
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	b9 f3       	breq	.-18     	; 0x25fc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    260e:	ec e2       	ldi	r30, 0x2C	; 44
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2626:	eb e2       	ldi	r30, 0x2B	; 43
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	88 23       	and	r24, r24
    262e:	dc f7       	brge	.-10     	; 0x2626 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2630:	ec e2       	ldi	r30, 0x2C	; 44
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <UART_sendString+0x6>
    2642:	0f 92       	push	r0
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9b 83       	std	Y+3, r25	; 0x03
    264a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    264c:	19 82       	std	Y+1, r1	; 0x01
    264e:	0e c0       	rjmp	.+28     	; 0x266c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	80 81       	ld	r24, Z
    2662:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <UART_sendByte>
		i++;
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	fc 01       	movw	r30, r24
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	80 81       	ld	r24, Z
    267e:	88 23       	and	r24, r24
    2680:	39 f7       	brne	.-50     	; 0x2650 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <UART_receiveString+0xa>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	9b 83       	std	Y+3, r25	; 0x03
    26a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26a2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	8c 01       	movw	r16, r24
    26b0:	02 0f       	add	r16, r18
    26b2:	13 1f       	adc	r17, r19
    26b4:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
    26b8:	f8 01       	movw	r30, r16
    26ba:	80 83       	st	Z, r24
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	9b 81       	ldd	r25, Y+3	; 0x03
    26ce:	8c 01       	movw	r16, r24
    26d0:	02 0f       	add	r16, r18
    26d2:	13 1f       	adc	r17, r19
    26d4:	0e 94 0f 13 	call	0x261e	; 0x261e <UART_recieveByte>
    26d8:	f8 01       	movw	r30, r16
    26da:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	80 81       	ld	r24, Z
    26ee:	83 32       	cpi	r24, 0x23	; 35
    26f0:	31 f7       	brne	.-52     	; 0x26be <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	fc 01       	movw	r30, r24
    26fe:	e2 0f       	add	r30, r18
    2700:	f3 1f       	adc	r31, r19
    2702:	10 82       	st	Z, r1
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <__divmodhi4>:
    2714:	97 fb       	bst	r25, 7
    2716:	09 2e       	mov	r0, r25
    2718:	07 26       	eor	r0, r23
    271a:	0a d0       	rcall	.+20     	; 0x2730 <__divmodhi4_neg1>
    271c:	77 fd       	sbrc	r23, 7
    271e:	04 d0       	rcall	.+8      	; 0x2728 <__divmodhi4_neg2>
    2720:	2e d0       	rcall	.+92     	; 0x277e <__udivmodhi4>
    2722:	06 d0       	rcall	.+12     	; 0x2730 <__divmodhi4_neg1>
    2724:	00 20       	and	r0, r0
    2726:	1a f4       	brpl	.+6      	; 0x272e <__divmodhi4_exit>

00002728 <__divmodhi4_neg2>:
    2728:	70 95       	com	r23
    272a:	61 95       	neg	r22
    272c:	7f 4f       	sbci	r23, 0xFF	; 255

0000272e <__divmodhi4_exit>:
    272e:	08 95       	ret

00002730 <__divmodhi4_neg1>:
    2730:	f6 f7       	brtc	.-4      	; 0x272e <__divmodhi4_exit>
    2732:	90 95       	com	r25
    2734:	81 95       	neg	r24
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	08 95       	ret

0000273a <__udivmodsi4>:
    273a:	a1 e2       	ldi	r26, 0x21	; 33
    273c:	1a 2e       	mov	r1, r26
    273e:	aa 1b       	sub	r26, r26
    2740:	bb 1b       	sub	r27, r27
    2742:	fd 01       	movw	r30, r26
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <__udivmodsi4_ep>

00002746 <__udivmodsi4_loop>:
    2746:	aa 1f       	adc	r26, r26
    2748:	bb 1f       	adc	r27, r27
    274a:	ee 1f       	adc	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	a2 17       	cp	r26, r18
    2750:	b3 07       	cpc	r27, r19
    2752:	e4 07       	cpc	r30, r20
    2754:	f5 07       	cpc	r31, r21
    2756:	20 f0       	brcs	.+8      	; 0x2760 <__udivmodsi4_ep>
    2758:	a2 1b       	sub	r26, r18
    275a:	b3 0b       	sbc	r27, r19
    275c:	e4 0b       	sbc	r30, r20
    275e:	f5 0b       	sbc	r31, r21

00002760 <__udivmodsi4_ep>:
    2760:	66 1f       	adc	r22, r22
    2762:	77 1f       	adc	r23, r23
    2764:	88 1f       	adc	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	1a 94       	dec	r1
    276a:	69 f7       	brne	.-38     	; 0x2746 <__udivmodsi4_loop>
    276c:	60 95       	com	r22
    276e:	70 95       	com	r23
    2770:	80 95       	com	r24
    2772:	90 95       	com	r25
    2774:	9b 01       	movw	r18, r22
    2776:	ac 01       	movw	r20, r24
    2778:	bd 01       	movw	r22, r26
    277a:	cf 01       	movw	r24, r30
    277c:	08 95       	ret

0000277e <__udivmodhi4>:
    277e:	aa 1b       	sub	r26, r26
    2780:	bb 1b       	sub	r27, r27
    2782:	51 e1       	ldi	r21, 0x11	; 17
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <__udivmodhi4_ep>

00002786 <__udivmodhi4_loop>:
    2786:	aa 1f       	adc	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	a6 17       	cp	r26, r22
    278c:	b7 07       	cpc	r27, r23
    278e:	10 f0       	brcs	.+4      	; 0x2794 <__udivmodhi4_ep>
    2790:	a6 1b       	sub	r26, r22
    2792:	b7 0b       	sbc	r27, r23

00002794 <__udivmodhi4_ep>:
    2794:	88 1f       	adc	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	5a 95       	dec	r21
    279a:	a9 f7       	brne	.-22     	; 0x2786 <__udivmodhi4_loop>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	08 95       	ret

000027a6 <__prologue_saves__>:
    27a6:	2f 92       	push	r2
    27a8:	3f 92       	push	r3
    27aa:	4f 92       	push	r4
    27ac:	5f 92       	push	r5
    27ae:	6f 92       	push	r6
    27b0:	7f 92       	push	r7
    27b2:	8f 92       	push	r8
    27b4:	9f 92       	push	r9
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	ca 1b       	sub	r28, r26
    27d0:	db 0b       	sbc	r29, r27
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	09 94       	ijmp

000027de <__epilogue_restores__>:
    27de:	2a 88       	ldd	r2, Y+18	; 0x12
    27e0:	39 88       	ldd	r3, Y+17	; 0x11
    27e2:	48 88       	ldd	r4, Y+16	; 0x10
    27e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f0:	b9 84       	ldd	r11, Y+9	; 0x09
    27f2:	c8 84       	ldd	r12, Y+8	; 0x08
    27f4:	df 80       	ldd	r13, Y+7	; 0x07
    27f6:	ee 80       	ldd	r14, Y+6	; 0x06
    27f8:	fd 80       	ldd	r15, Y+5	; 0x05
    27fa:	0c 81       	ldd	r16, Y+4	; 0x04
    27fc:	1b 81       	ldd	r17, Y+3	; 0x03
    27fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2800:	b9 81       	ldd	r27, Y+1	; 0x01
    2802:	ce 0f       	add	r28, r30
    2804:	d1 1d       	adc	r29, r1
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	ed 01       	movw	r28, r26
    2812:	08 95       	ret

00002814 <_exit>:
    2814:	f8 94       	cli

00002816 <__stop_program>:
    2816:	ff cf       	rjmp	.-2      	; 0x2816 <__stop_program>
